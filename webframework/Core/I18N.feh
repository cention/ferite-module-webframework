
/**
 * @namespace I18N
 * @brief     Internationalisation namespace
 */
namespace I18N {
	
	string desiredCatalog;
	array  catalog;
	/**
	 * @function loadCatalog
	 * @declaration function loadCatalog( string language )
	 * @brief Load a given translation catalog out of the applications resources
	 * @param string language The language to load
	 */
	function loadCatalog( string language ) {
		.desiredCatalog = language;
		monitor {
			.catalog = include( __pathForResource("$language/translation.strings.fe","Strings") );
		} handle {
			.catalog = [];
		}
	}
}
/**
 * @end
 */

namespace modifies String {
	function expand( string fmt, ... ) {
		array a = arguments();
		object o = new Regexp( '{(([0-9]+))(:.*?)?}');
		number count = 0;
		a.shift();
		if( a.size() > 0 ) {
			return o.replaceAll( fmt ) using ( match ) {
				if( match.capture(1) == '' )
					return (count < a.size() ? a[count++] : '');
				else {
					number index = match.capture(1).toNumber();
					return (index < a.size() ? a[index] : '');
				}
			};
		} 
		return fmt;
	}
	function sub( string source, string match, string replace ) {
		object o = new Regexp(match);
		return o.replace(source, replace);
	}
	function gsub( string source, string match, string replace ) {
		object o = new Regexp(match);
		return o.replaceAll(source, replace);
	}

	array UTF8map;

	function utf8ToLower( string s ) {
		string r = s.toLower();
		.UTF8map.map() using ( key, value ) {
			r = r.replace( value, key );
		};
		return r;
	}
	function utf8ToUpper( string s ) {
		string r = s.toUpper();
		.UTF8map.map() using ( key, value ) {
			r = r.replace( key, value );
		};
		return r;
	}
}

/**
 * @group I18N Tools
 * @brief A set of helper functions for I18N work
 */

	/**
	 * @function formatDate
	 * @declaration function formatDate( number date )
	 * @brief Format a GMT timestamp into an application local date representation as a string
	 * @param number date The timestamp
	 * @return A string representation
	 * @warning Uses the Config.DateFormat variable
	 */
	function formatDate( number date ) {
		number localDate = date + (Config.TimeZoneOffset * 60); // Ideally this will be per user at somepoint.
		return Date.date(localDate).format(Config.DateFormat);
	}
	/**
	 * @function formatDateTime
	 * @declaration function formatDateTime( number date )
	 * @brief Format a GMT timestamp into an application local date and time representation as a string
	 * @param number date The timstamp
	 * @return A string representation
	 * @warning Uses the Config.DateFormat variable
	 */
	function formatDateTime( number date ) {
		number localDate = date + (Config.TimeZoneOffset * 60); // Ideally this will be per user at somepoint.
		return Date.date(localDate).format(Config.DateFormat + ' %H:%M');
	}
	/**
	 * @function formatTime
	 * @declaration function formatTime( number date )
	 * @brief Format a GMT timestamp into an application local time representation as a string
	 * @param number date The timstamp
	 * @return A string representation in HOUR:MINUTE
	 */
	function formatTime( number date ){
		number localDate = date + (Config.TimeZoneOffset * 60); // Ideally this will be per user at somepoint.
		return Date.date(localDate).format('%H:%M');
	}
	/**
	 * @function formatPrice
	 * @declaration function formatPrice( number major, number minor )
	 * @brief Format a price to an application local string representation
	 * @param number major The whole value
	 * @param number minor The decimal value
	 * @return The price formated using the Config.PriceSeparator value
	 */
	function formatPrice( number major, number minor ) {
		return "$major${Config.PriceSeparator}$minor";
	}
	/**
	 * @function I
	 * @declaration function I( string toTranslate )
	 * @brief Take a given string, consule the currently loaded translation dictionary and return the translated string
	 * @param string toTranslate The string to translate
	 * @return The translated string, or the original string if no translation exists.
	 */
	function I( string toTranslate ) {
	    if( I18N.catalog.keyExists(toTranslate - "\n") )
			return I18N.catalog[toTranslate];
	    return toTranslate;
	}
/**
 * @end
 */

String.UTF8map = [ 'å' => 'Å', 'ä' => 'Ä', 'ö' => 'Ö' ];
