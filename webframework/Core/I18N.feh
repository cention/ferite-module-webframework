
/**
 * @namespace I18N
 * @brief     Internationalisation namespace
 */
namespace I18N {
	
	string desiredCatalog;
	array  catalog;
	/**
	 * @function loadCatalog
	 * @declaration function loadCatalog( string language )
	 * @brief Load a given translation catalog out of the applications resources
	 * @param string language The language to load
	 */
	function loadCatalog( string language ) {
		.desiredCatalog = language;
		monitor {
			.catalog = include( __pathForResource("$language/translation.strings.fe","Strings") );
		} handle {
			debug('I18N: ' + err.str);
			.catalog = [];
		}
	}
	
	function cleanString( string key ) {
		return .cleanString( key, true );
	}
	function cleanString( string key, boolean escapeQuote ) {
		key = key.replace("\t", " ");
		key = key.replace("\n", " ");
		key = key.replace("\r", " ");

		key = Regexp.replaceAll("([^\\\\])?\\\\'", key, "\\1'");

		//HELP: This is the original regex:
		//  key = Regexp.replaceAll("\\\\", key, "\\\\\\");
		// and we're replacing it with this:
		key = key.replace("\\", "\\\\\\");
		// My question is why is the original code doing that? - Replacing 2
		// backslashes with three? - nazri


		if( escapeQuote ) {
			key = key.replace("'", "\\'");
		}

		key = Regexp.replaceAll( " [ \t\n]+", key, " ");
		key = Regexp.replaceAll("\t[ \t\n]+", key, " ");
		key = Regexp.replaceAll("\n[ \t\n]+", key, " ");

		return key.trim(" \r\n\t");
	}
}
/**
 * @end
 */
namespace modifies String {
	function sub( string source, string match, string replace ) {
		object o = new Regexp(match);
		return o.replace(source, replace);
	}
	function gsub( string source, string match, string replace ) {
		object o = new Regexp(match);
		return o.replaceAll(source, replace);
	}

	array UTF8map;

	function utf8ToLower( string s ) {
		string r = s.toLower();
		.UTF8map.map() using ( key, value ) {
			r = r.replace( value, key );
		};
		return r;
	}
	function utf8ToUpper( string s ) {
		string r = s.toUpper();
		.UTF8map.map() using ( key, value ) {
			r = r.replace( key, value );
		};
		return r;
	}
}

/**
 * @group I18N Tools
 * @brief A set of helper functions for I18N work
 */

	/**
	 * @function formatDate
	 * @declaration function formatDate( number date )
	 * @brief Format a GMT timestamp into an application local date representation as a string
	 * @param number date The timestamp
	 * @return A string representation
	 * @warning Uses the Config.DateFormat variable
	 */
	function formatDate( number date ) {
		number localOffset = (Config.TimeZoneOffset * 60);
		number localDate = date + localOffset;
		return Date.localDate(localDate).format(Config.DateFormat);
	}
	function formatDateTZ( number date, string zoneName ) {
		return .tzLocalDate(date, zoneName).format(Config.DateFormat);
	}
	function formatDateTZ( number date, string zoneName, string format ) {
		return .tzLocalDate(date, zoneName).format(format);
	}
	/**
	 * @function formatDateTime
	 * @declaration function formatDateTime( number date )
	 * @brief Format a GMT timestamp into an application local date and time representation as a string
	 * @param number date The timstamp
	 * @return A string representation
	 * @warning Uses the Config.DateFormat variable
	 */
	function formatDateTime( number date ) {
		number localOffset = (Config.TimeZoneOffset * 60);
		number localDate = date + localOffset;
		return Date.localDate(localDate).format(Config.DateFormat + ' %H:%M');
	}
	function formatDateTimeTZ( number date, string zoneName ) {
		return .tzLocalDate(date, zoneName).format(Config.DateFormat + ' %H:%M');
	}
	function formatDateTimeWithTimeZone( number date, string zoneName, string timeformat ) {
		if (timeformat) {
			return .tzLocalDate(date, zoneName).format(Config.DateFormat + ' ' + timeformat);
		}
		return .tzLocalDate(date, zoneName).format(Config.DateFormat);
	}
	/**
	 * @function tzLocalDate
	 * @declaration function tzLocalDate( number date )
	 * @brief Convert a GMT timestamp Date object at specified TZ
	 * @param number date The GMT timestamp
	 * @return A Date object
	 */
	function tzLocalDate(number date, string zoneName) {
		object dateAtTZ;
		string oldZone = Sys.env.read("TZ");

		if(zoneName.length() > 0 ){
			Sys.env.write("TZ",zoneName);
		}
		dateAtTZ = Date.localDate(date);
		if(oldZone.length() > 0){
			Sys.env.write("TZ",oldZone);
		}
		else{
			Sys.env.del("TZ");
		}
		return dateAtTZ;
	}

	/**
	 * @function tzLocalDate
	 * @declaration function gmtDateFromStringtz( string dateString, string timeZone )
	 * @brief Convert a string with a date in format Config.DateFormat to a GMT timestamp in relation to the timeone
	 * @param string dateString representing time in HOUR:MINUTE:SECOND format
	 * @param string zoneName  name of the timezone where dateString is located
	 * @return A GMT timestamp
	 */
	function gmtDateFromStringtz(string dateString, string zoneName){
		number theGmtTime = 0;
		object d1;
		string oldZone = Sys.env.read("TZ");

		if(zoneName.length() > 0 ){
			Sys.env.write("TZ",zoneName);
		}
		d1 = Date.localParse(dateString, Config.DateFormat + ' %T');
		theGmtTime = d1.time();
		if(oldZone.length() > 0){
			Sys.env.write("TZ",oldZone);
		}
		else{
			Sys.env.del("TZ");
		}
		return theGmtTime;
	}

	/**
	 * @function formatTime
	 * @declaration function formatTime( number date )
	 * @brief Format a GMT timestamp into an application local time representation as a string
	 * @param number date The timstamp
	 * @return A string representation in HOUR:MINUTE
	 */
	function formatTime( number date ){
		number localOffset = (Config.TimeZoneOffset * 60);
		number localDate = date + localOffset;
		return Date.localDate(localDate).format('%H:%M');
	}
	function formatTimeTZ( number date, string zoneName ) {
		return .tzLocalDate(date, zoneName).format('%H:%M');
	}
	/**
	 * @function dateStringToTimestamp
	 * @declaration function dateStringToTimestamp( string time )
	 * @brief Convert a string with a date in format Config.DateFormat to a GMT timestamp
	 * @param string time String representing time in HOUR:MINUTE:SECOND format
	 * @return A GMT timestamp
	 * @warning Uses the Config.DateFormat variable
	 */
	function dateStringToTimestamp( string date, string time ) {
		object d1 = Date.localParse(date + ' ' + time, Config.DateFormat + ' %T');
		object d2 = Date.localDate(d1.time());
		/*
		 * Note: Postgres already handles DST calculations based on tzdata if you pass it your
		 *       time zone. Which means this calculation is a bug. Commenting this for now
		 *       because I'm not sure if this affects anything else - Adly
		 */
		// if( d1.tm_isdst == 0 and d2.tm_isdst == 0 )
		// 	return d2.time() - 3600;
		// else if( d1.tm_isdst == 0 and d2.tm_isdst == 1 )
		// 	return d2.time() - 7200 - 3600;
		// else if( d1.tm_isdst == 1 and d2.tm_isdst == 1 )
		// 	return d2.time() - 7200;
		
		// Not sure why the following works but it does
		// (at least on servers in Sweden):
		if( (d1.tm_isdst == 0 and d2.tm_isdst == 1) or (d1.tm_isdst == 1 and d2.tm_isdst == 0) ) // XOR
			return d2.time() + 3600;
		
		return d2.time();
	}
	function dateStringToTimestamp( string date ) {
		object d1 = Date.localParse(date, Config.DateFormat);
		object d2 = Date.localDate(d1.time());
		// if( d1.tm_isdst == 0 and d2.tm_isdst == 0 )
		// 	return d2.time() - 3600;
		// else if( d1.tm_isdst == 0 and d2.tm_isdst == 1 )
		// 	return d2.time() - 7200 - 3600;
		// else if( d1.tm_isdst == 1 and d2.tm_isdst == 1 )
		// 	return d2.time() - 7200;
		
		// Not sure why the following works but it does
		// (at least on servers in Sweden):
		if( (d1.tm_isdst == 0 and d2.tm_isdst == 1) or (d1.tm_isdst == 1 and d2.tm_isdst == 0) ) // XOR
			return d2.time() + 3600;
		
		return d2.time();
	}
	/**
	 * @function formatPrice
	 * @declaration function formatPrice( number major, number minor )
	 * @brief Format a price to an application local string representation
	 * @param number major The whole value
	 * @param number minor The decimal value
	 * @return The price formated using the Config.PriceSeparator value
	 */
	function formatPrice( number major, number minor ) {
		return "$major${Config.PriceSeparator}$minor";
	}
	/**
	 * @function I
	 * @declaration function I( string toTranslate )
	 * @brief Take a given string, consule the currently loaded translation dictionary and return the translated string
	 * @param string toTranslate The string to translate
	 * @return The translated string, or the original string if no translation exists.
	 */
	function I( string key ) {
		if( I18N.catalog and key ) {
			if( I18N.catalog.keyExists(key) ) {
				string text = I18N.catalog[key];
				if (text) {
					return text;
				}
			}
		}
		return key;
	}

	function L(string toTranslate) {
		return I(toTranslate);
	}
	
/**
 * @end
 */

String.UTF8map = [ 'å' => 'Å', 'ä' => 'Ä', 'ö' => 'Ö' ];
