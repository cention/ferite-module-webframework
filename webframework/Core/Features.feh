namespace modifies webframework {
	class modifies Feature {
		
		static function nativeState( string type, string state ) {
			switch( type.toLower() ) {
				case 'string':
					return state;
				case 'number':
					return state.toNumber();
				case 'boolean':
					return (state.toLower() == 'true' ? true : false);
				default:
					raise new Error("The feature system only deals with strings, numbers and booleans");
			}
		}
		function nativeState
			return webframework.Feature.nativeState( .type, .state );
		function setNativeState( string str ) {
			.setValue('state', str);
			.setValue('type', 'string');
		}
		function setNativeState( number str ) {
			.setValue('state', "$str");
			.setValue('type', 'number');
		}
		function setNativeState( boolean str ) {
			.setValue('state', (str ? 'true' : 'false'));
			.setValue('type', 'boolean');
		}
	}
}

namespace Feature {
	
	array defaultContext;

	function setDefaultContext( array path )
		.defaultContext = path;
	function setDefaultContext( string path )
		.defaultContext = path.toArray('.');

	function _appliedFeatureState( string feature, array path ) {
		array list = webframework.AppliedFeatureState.byFeature(feature.toLower());
		if( not list ) {
			return null;
		} else {
			object result = null;
			list.each() using ( app ) {
				array contextPath = app.context.toArray('.');
				result = app;
				if( contextPath.size() <= path.size() ) {
					contextPath.eachWithIndex() using ( part, index ) {
						if( not ((part == '*') or (part.toLower() == path[index].toLower())) ) {
							result = null;
							return false;
						}
					};
				}
			};
			return result;
		}
	}
	function state( string feature, array path ) {
		object theFeature = webframework.Feature.forState(feature);
		if( theFeature ) {
			object theApplication = ._appliedFeatureState( feature, path );
			if( theApplication ) {
				return webframework.Feature.nativeState( theFeature.type, theApplication.state );
			} else {
				return webframework.Feature.nativeState( theFeature.type, theFeature.state );
			}
		} else {
			raise new Error("There is no feature called '$feature' recorded!");
		}
	}
	function state( string feature, string path ) 
		return state( feature, path.toArray('.') );
	function state( string feature )
		return state( feature, .defaultContext );
}