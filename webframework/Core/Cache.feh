uses "embfer";

global {
   object currentPage;
}

uses "console";

namespace Cache {
	
   string cacheExtension = ".cache";

   function lastTriggerTime( string path ) {   
		object resource = Permissions.fetchApplicationResource(path);
		if( resource ) {
			return resource.timestampLastUpdate;
		}
		return 0;
   }
   
	function generateCacheFilePath( string path ) {
		string pagePath = path;
		pagePath = Regexp.replace('^.*?([A-Za-z]+).app', path, '\1.app');
		pagePath = Regexp.replace('^/', pagePath - (Config.PublicPath - "Server/"), '');
		return Config.CachePath + Regexp.replaceAll( "/", pagePath + .cacheExtension, "." );
	}

	function loadPageComponents( string page ) {
		array  componentList;
		string serialComponentList = "";
		string cache_path = .generateCacheFilePath(pathForPageTemplate(page));
		string component_list_cache_path = cache_path + ".components.list";
		string component_cache_path = cache_path + ".components";
		object componentCacheFile = File.open( component_cache_path );
		array  list = include(component_list_cache_path);
		
		// We load any automatically found components
		list.each() using ( name ) { 
			GUIKit.loadComponent(name); 
		};
		serialComponentList = componentCacheFile.toString();
		componentCacheFile.close();
		componentList = Serialize.fromNative( serialComponentList );
		if( componentList.keyExists('__STORED_PERSISTENCE_LAYER__') ) {
			Cache.persistence = componentList['__STORED_PERSISTENCE_LAYER__'];
			componentList.del('__STORED_PERSISTENCE_LAYER__');
		}
		Cache.components = [];
		Array.each( componentList ) using ( component ) {
			component.setID(component.id);
			component.initialiseComponent();
		};
	}
   
	function getComponent( string id ) {
		if( Array.keyExists(.components, id) )
			return .components[id];
		return null;
	}
   
	object page;
	array  components;
	object display;
	array  persistence;

	function loadPage( string page ) {
		string cache_path = .generateCacheFilePath(pathForPageTemplate(page));
		string real_cache_path = cache_path + ".xml";
		string component_list_cache_path = cache_path + ".components.list";
		string component_cache_path = cache_path + ".components";
		string strings_cache_path = cache_path + ".strings.fe";
		string script_cache_path = cache_path + ".fe";
		number before = Sys.timestamp(), after;
		void rval;
		metrics.checkpoint("Include: $script_cache_path");
		rval = include( script_cache_path );
		metrics.checkpoint("Done Include: $script_cache_path");
		metrics.checkpoint("Storing viewstate: ${Cache.persistence}");
		ViewState.store(application.action);
		after = Sys.timestamp();
//		println("time: ${(after-before)}");
		return rval;
	}
   
	function clear( string page ) {
		string cache_path = .generateCacheFilePath(pathForPageTemplate(page));
		string real_cache_path = cache_path + ".xml";
		string component_list_cache_path = cache_path + ".components.list";
		string component_cache_path = cache_path + ".components";
		string strings_cache_path = cache_path + ".strings.fe";
		string script_cache_path = cache_path + ".fe";
		string javascript_cache_path = cache_path + '.javascript.fe';
		
		File.remove(real_cache_path);
		File.remove(component_list_cache_path);
		File.remove(component_cache_path);
		File.remove(strings_cache_path);
		File.remove(script_cache_path);
		File.remove(javascript_cache_path);
	}
	
	function currentPageLastCache() {
		string cache_path = .generateCacheFilePath(pathForPageTemplate(application.action));
		object pagecache_stat = Posix.stat( cache_path + '.xml' );
		if( pagecache_stat )
			return Date.date(pagecache_stat.getModifiedTime()).format(Config.DateFormat + ' %H:%M:%S');
		return I('Not Cached');
	}
	function runEmbfer( string contents ) {
		string file = String.trim(contents," ");
		object o = new Embfer();
		o.setOutputFunction( "__embfer_output += " );
		return o.fromFile(file);
	}
   
	function PreCachePage( string path, string contenttype, void pageclass, object page ) {
		string templateWrapper = pageclass.getWrapperTemplateName();
		string real_path = pathForPageTemplate(path);
		string cache_path = .generateCacheFilePath(real_path);
		string real_cache_path = cache_path + ".xml";
		string component_list_cache_path = cache_path + ".components.list";
		string component_cache_path = cache_path + ".components";
		string strings_cache_path = cache_path + ".strings.fe";
		string script_cache_path = cache_path + ".fe";
		string javascript_cache_path = cache_path + '.javascript.fe';
		string stage = '';

		array  translationCatalog = I18N.catalog;
//		I18N.catalog = [];
		
//		monitor {
			array viewState;
			string serialViewState = "", xmloutput = "", content;
			void renderClass = GUIKit.Render.renderEngines[contenttype];
			object renderEngine = new renderClass();

			object compiler = new Embfer();
			string script = "";
			string evaluated_script = "";
			object cachePath = null, file;

			I18N.catalog = [];
			
			if( not (cachePath = Posix.stat(Config.CachePath)) ) {
				raise new Error("Unable to access '${Config.CachePath}', please check the path exists and is writeable");
			}

			stage = 'Loading Page File';
			File.open( real_path ) using ( file ) {
				content = file.toString();
			};

			File.remove(real_cache_path);
			File.remove(component_cache_path);
			File.remove(strings_cache_path);
			File.remove(script_cache_path);
			File.remove(javascript_cache_path);
			
			if( not Embfer.hasTagHandler("include") ) {
				Embfer.registerTagHandler( "include" ) using ( tag, contents ) {
					return Cache.runEmbfer( contents );
				};
			}

			content = renderEngine.wrapContent( content, [ 'Template' => templateWrapper ] ); 

			compiler.setOutputFunction( "__embfer_output += " );
			script += "string __embfer_output;";
			script += compiler.fromString(content);
			script += 'return __embfer_output;';
		
			stage = 'Evaluating Cache File:';
			evaluated_script = eval(script);
			file = File.create( real_cache_path, 0666 );
			if( not file ) {
				raise new Error("Unable to create cache file '$real_cache_path', please make sure the directory '${Config.CachePath}' is writeable (chmod 777)");
			}
			file.writeln( evaluated_script );

			// Then we cache the components within the page
			stage = 'Loading Cache Template File';
			renderEngine.directLoadTemplate( real_cache_path );
			stage = 'Processing Cache Template File: ';
			renderEngine.processSource();
			page.bindComponents();
			metrics.checkpoint("&rarr; Initialising components");
			page.initialiseComponents();
			page.publishPersistence();
			metrics.checkpoint("&larr; Initialising components");
			
			Cache.components['__STORED_PERSISTENCE_LAYER__'] = Cache.persistence;
			File.create( component_cache_path, 0666 ) using ( file ) {
				file.write( Serialize.toNative( Cache.components ) );
			};
			Cache.components.del('__STORED_PERSISTENCE_LAYER__');
			
			File.create( component_list_cache_path, 0666 ) using ( file ) {
				file.write( 'return [ ' +
						GUIKit.components.join(', ') using ( component ) {
							return "'${component.name}'";
						} + ' ];' );
			};
			// Then we cache the component embodied xml as a ferite script
			stage = 'Generating Page Script';
			xmloutput = renderEngine.render();
			File.create( script_cache_path, 0666 )using ( file ) {
				file.write( xmloutput );
			};
			stage = 'Generating Strings File';
			File.create( strings_cache_path, 0666 ) using ( file ) {
				file.write( renderEngine.generateStrings() );
			};
			stage = 'Generating Javascript Requirment File';
			File.create( javascript_cache_path, 0666 ) using ( file ) {
				file.write( 'return ' + page.getRequiredJavascript() + ';' );
			};
//		} handle (error) {
//			if( webframeworkConsoleTool ) {
//				Console.println("Failed caching at stage $stage: ${err.str}"); 
//			} else {
//				application.failSafeErrorPage( error, "Failure during caching [$stage]", false);
//	
//				if( not Config.Debug ) {
//					File.remove(real_cache_path);
//					File.remove(component_cache_path);
//					File.remove(strings_cache_path);
//					File.remove(script_cache_path);
//					File.remove(javascript_cache_path);
//				}
//				Core.exit();
//			}
//		}
		I18N.catalog = translationCatalog;
	}
	function checkFilesExist( array files ) {
		number count = 0;
		files.each() using ( file ) {
			object stat = Posix.stat(file);
			if( stat ) {
				count++;
			}
		};
		return (count == files.size());
	}
	
	function checkPageCache( string path, string contenttype, void pageclass, object page ) {
		string real_path = pathForPageTemplate(path);
		string cache_path = .generateCacheFilePath(real_path);

		string real_cache_path = cache_path + ".xml";
		string component_list_cache_path = cache_path + ".components.list";
		string component_cache_path = cache_path + ".components";
		string strings_cache_path = cache_path + ".strings.fe";
		string script_cache_path = cache_path + ".fe";
		string javascript_cache_path = cache_path + ".javascript.fe";

		object page_stat = Posix.stat( real_path );
		object pagecache_stat = Posix.stat( real_cache_path );
				
		if( page_stat != null ) {
			boolean forceRecache = false;

			if( Config.Debug ) {
				if( pagecache_stat == null ) {
					forceRecache = true;
				} else {
					/* Check the page templates, if they change, recache */
					void   renderClass = GUIKit.Render.renderEngines[contenttype];
					object renderEngine = new renderClass();
					array  dependants = renderEngine.dependantList( [ 'Template' => pageclass.getWrapperTemplateName() ] ); 
					dependants.each() using ( file ) {
						object stat = Posix.stat(file);
						if( stat.getModifiedTime() > pagecache_stat.getModifiedTime() ) {
							forceRecache = true;
							return false;
						}
					};
				}
			} 
		
			if( forceRecache ||
				not .checkFilesExist([ real_cache_path, component_list_cache_path, component_cache_path, strings_cache_path, script_cache_path, javascript_cache_path ]) ||
				pagecache_stat == null || 
				pagecache_stat.getModifiedTime() < page_stat.getModifiedTime() ) {
					Cache.PreCachePage( path, contenttype, pageclass, page );
					return true;
			}  
		}
		else
		   Sys.error( "Unable to load page '$real_path'\n", 0 );
	   
	   return false;
   }
   
	function touchPage( string page ) {
		object resource = Permissions.fetchApplicationResource(page);
		if( resource ) {
			resource.setValue('timestampLastUpdate', Date.GMTnow());
			resource.save();
			
			/* TODO: cache dependance */
			
			return true;
		}
		return false;
   }
}
