/**
 * @namespace Permissions
 * @brief     The webframework permissions layer
 */

class modifies webframework.User {
	/**
	 * @class User
	 * @brief The Permissions.User class provides a few extra functions on top of the webframework.User class
	 * @extends webframework.User
	 */
	/**
	 * @function toString
	 * @declaration function toString()
	 * @brief A HTML string representation of the user object
	 * @return A string with some user information (invokes .toName())
	 */
       function toString() {
           return "<div>User: ${.toName()}</div>";
       }
	/**
	 * @function toName
	 * @declaration function toName()
	 * @brief Takes various values from the user details and generates a display name
	 * @return A name for the user, it first tries the real name, then the nickname and finally will use the username
	 */
	function toName() {
		string name = String.trim(.firstName + " " + .lastName,' ');
		if( name != '' )
			return name;
		name = String.trim(.nickname, ' ');
		if( name != '' )
			return name;
		return .username;
	}
	/**
	 * @function describe
	 * @declaration function describe()
	 * @brief Based upon the toName() function, this will also provide the username and mark the result as striked out
			if the user is not active.
	 * @return An HTML string
	 */
	function describe() {
		string output = .toName() + " (${.username})";
		if( not .active ) {
			return HTML.strike(output);
		}
		return output;
	}
	/**
	 * @function setPassword
	 * @declaration function setPassword( string password )
	 * @brief Set the users password in the system
	 * @param string password The password to set
	 */
	function setPassword( string password ) {
		.setValue('password', Permissions.encodePassword(password));
		.save();
	}
}
namespace Permissions {
	array resourcePermissionCache;
	/**
	 * @function userAllowedForResource
	 * @declaration function userAllowedForResource( object user, string resource )
	 * @brief Checks to see if a given user can access a given resource
	 * @param object user The user object
	 * @param string resource The name of the resource
	 * @return true if access is allowed, false otherwise
	 */
    function userAllowedForResource( object user, string resource ) {
		if( resource == "Login" or resource == "Logout" )
            return true;
        else {
			string cacheKey = '';
			if( not user )
				user = Permissions.fetchUserObject('guest');
			cacheKey = user.username + '::' + resource;
			if( .resourcePermissionCache.keyExists(cacheKey) ) {
				return .resourcePermissionCache[cacheKey];
			} else {
	            number valid = false;
				if( user.active ) {
					object anyZone = webframework.Application.zonesForUserResource( user.id, resource );
					if( anyZone )
						valid = true;
				}
				.resourcePermissionCache[cacheKey] = valid;
            	return valid;
			}
        }
        return false;
    }
	/**
	 * @function userAllowedForResourceInZone
	 * @declaration function userAllowedForResourceInZone( object user, string resource, string zone )
	 * @brief Check to see if a user is allowed for a resource in a specific zone
	 * @param object user The user object
	 * @param string resource The resource to check against
	 * @param string zone The name of the zone to look in
	 * @return true if access is allowed, false otherwise
	 */
    function userAllowedForResourceInZone( object user, string resource, string zone ) {
        object anyZone = null;
    	if( resource == "Login" or resource == "Logout" ) 
			return true;
		if( not user )
			user = Permissions.fetchUserObject('guest');
		if( user.active ) {
			anyZone = webframework.Application.specificZoneForUserResource( user.id, resource, zone );
			if( anyZone ) 
				return true;
		}
		return false;
    }
    object currentUserObject;
    /**
     * @function currentUserID
     * @declaration function currentUserID()
     * @brief Fetch the current user ID
     * @return The current user ID or 0 otherwise
     */
	function currentUserID() {
		object o = Permissions.fetchUserObject();
		if( o ) 
			return o.id;
		return 0;
	}
	/**
	 * @function userAlias
	 * @declaration function userAlias( number id )
	 * @brief Get the name/alias for a given user id
	 * @param number id The ID of the user
	 * @return If the user exists, the user information, otherwise 'Guest'
	 */
	function userAlias( number id ) {
		object o = Permissions.fetchUserObject(id);
		if( o ) 
			return o.toName();
		return I('Guest');
	}
	/**
	 * @function fetchUserObject
	 * @declaration function fetchUserObject()
	 * @brief Fetch the current user object
	 * @return The current user object, null otherwise
	 */
	function fetchUserObject() {
		if( .currentUserObject == null ) {
			array cookies = request.cookies();
			if( Array.keyExists(cookies,"${application.realName}WFUserID") and 
					Array.keyExists(cookies,"${application.realName}WFPassword") and 
						cookies["${application.realName}WFUserID"] != "INVALIDUSER" ) {
				.currentUserObject = .fetchUserObject( String.toNumber(cookies["${application.realName}WFUserID"]) );
				if( .currentUserObject and .currentUserObject.password == cookies["${application.realName}WFPassword"] ) {
					.userObjectCache['' + .currentUserObject.id] = .currentUserObject;
				} else {
					Permissions.invalidateUser();
				}
			} 
		}
		if( not .currentUserObject )
			.currentUserObject = .fetchUserObject('guest');
        return .currentUserObject;
    }
	array userObjectCache;
	/**
	 * @function fetchUserObject
	 * @declaration function fetchUserObject( number id )
	 * @brief Fetch the user object associated with a given user id
	 * @param number id The user id to fetch
	 * @return A user object, null if the user doesn't exist
	 */
	function fetchUserObject( number id ) {
		if( id > 0 ) {
			if( not .userObjectCache.keyExists("$id")) {
				object user = webframework.User.load(id);
				.userObjectCache["$id"] = null;
				if( user ) {
					.userObjectCache["$id"] = user;
				}
			}
			return .userObjectCache["$id"];
		}
		return null;
	}
	/**
	 * @function fetchUserObject
	 * @declaration function fetchUserObject( string username )
	 * @brief Fetch the user object associated with the given username
	 * @param string username The username to use
	 * @return A user object, null if no user found
	 */
	function fetchUserObject( string username ) {
		username = username.toLower();
		if( not .userObjectCache.keyExists("username:$username") ) {
			object user = webframework.User.byLogin(username);
			if( not user and username == 'guest' ) {
				user = Permissions.createApplicationUser('guest');
			}
			.userObjectCache["username:$username"] = user;
		} 
		return .userObjectCache["username:$username"];
	}
	/**
	 * @function setValidationCookies
	 * @declaration function setValidationCookies( object user )
	 * @brief Set the validation cookies for the given user effectively "logging them in"
	 * @param object user The user object to set the validation cookies for
	 */
	function setValidationCookies( object user ) {
		object d = Date.date(Date.GMTnow() + (135 * 60));
		string format = d.format('%a, %d-%b-%Y %H:%M:%S GMT');
        request.setCookie( "${application.realName}WFUserID=${user.id}; path=/" );
        request.setCookie( "${application.realName}WFPassword=${user.password}; path=/" );
	}
	/**
	 * @function validateUser
	 * @declaration function validateUser( string username, string password )
	 * @brief Validate a given username and password against the systems data store. If the user can be validated, send validation cookies.
	 * @param string username The username to work with
	 * @param string password The password to check against
	 * @return The user object or null if validation failed.
	 */
    function validateUser( string username, string password ) {
		object user = webframework.User.byLogin( username.toLower() );
		if( user and user.password == Permissions.encodePassword(password) ) {
			Permissions.setValidationCookies( user );
	        return user;
		}
		return null;
    }
	/**
	 * @function encodePassword
	 * @declaration function encodePassword( string password )
	 * @brief Encode a string using the one way password encoding
	 * @param string password The word to encode
	 * @return The encoded password
	 */
	function encodePassword( string password ) {
		return String.base64encode(MHash.hashString( password, MHash.SHA256 ));
	}
	/**
	 * @function invalidateUser
	 * @declaration function invalidateUser()
	 * @brief Make the validation cookies invalid effectively causing the system to "log the user out"
	 */
    function invalidateUser() {
        request.setCookie( "${application.realName}WFUserID=INVALIDUSER; path=/" );
        request.setCookie( "${application.realName}WFPassword=INVALIDPASSWORD; path=/" );
    }
	/**
	 * @function usernameExists
	 * @declaration function usernameExists( string name )
	 * @brief Check to see if a given username exists within the system.
	 * @param string name Username to check against
	 * @return true if it exists, false otherwise
	 */
	function usernameExists( string name ) {
		object user = webframework.User.byLogin( username.toLower() );
		if( user ) 
			return true;
		return false;
	}
	/**
	 * @function createApplicationUser
	 * @declaration function createApplicationUser( string label )
	 * @brief Create a user object with a default password 'no-password' if the user doesn't exist.
	 * @param string label The username
	 * @return The user object related to the username
	 */
	function createApplicationUser( string label ) {
		return .createApplicationUser( label, 'no-password' );
	}
	/**
	 * @function createApplicationUser
	 * @declaration function createApplicationUser( string label, string password )
	 * @brief Create a user object with the username and password if the user doesn't exist
	 * @param string label The username
	 * @param string password The password
	 * @return The user object related to the username
	 */
	function createApplicationUser( string label, string password ) {
		object user = webframework.User.byLogin(label);
		if( not user ) {
			user = new webframework.User();
			user.setValue('username', label);
			user.setValue('password', Permissions.encodePassword(password));
			user.setValue('active', true);
			user.setValue('timestampCreated', Date.GMTnow());
			user.setValue('timestampLastAccess', Date.GMTnow());
			user.save();
		}
		return user;
	}
	/**
	 * @function createApplicationResource
	 * @declaration function createApplicationResource( string label )
	 * @brief Create, if not existing, the named resource with type 'page'
	 * @param string label The name of the resource
	 * @return The resource linked to the name
	 */
	function createApplicationResource( string label ) {
		object resource = webframework.Resource.byName(label);
		if( not resource ) {
			resource = new webframework.Resource();
			resource.setValue('name', label);
			resource.setValue('type', 'page');
			resource.save();
		}
		return resource;
	}
	/**
	 * @function createApplicationZone
	 * @declaration function createApplicationZone( string new_zone, array new_users, array new_resources )
	 * @brief Create a zone, with a given list of users and resources. Unknown users and resources will be created.
	 * @param string new_zone The name of the zone
	 * @param array new_users A string list of usernames to add to the zone
	 * @param array new_resources A string list of resources to add to the zone
	 * @return The created zone
	 */
	function createApplicationZone( string new_zone, array new_users, array new_resources ) {
		array users, resources;
		object zone;
		new_resources.each() using ( label ) {
			resources[] = Permissions.createApplicationResource(label);
		};
		new_users.each() using ( label ) {
			users[] = Permissions.createApplicationUser(label);
		};
		if( not (zone = webframework.Zone.byName(new_zone)) ){
			zone = new webframework.Zone();
			zone.setValue('name', new_zone);
		}
		zone.setValue('resources', resources);
		zone.setValue('users', users);
		zone.save();
		return zone;
	}
	
	function allowUserAccessForZone( object targetUser, string name ) {
		object zone = webframework.Zone.byName(name);
		if( zone ) {
			boolean haveUser = false;
			zone.users.each() using ( user ) {
				if( user.id == targetUser.id ) {
					haveUser = true;
					return false;
				}
			};
			if( not haveUser ) {
				zone.usersAdd(targetUser);
				zone.save();
			}
		}
	}
}
/**
 * @end
 */
