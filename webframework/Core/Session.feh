/**
 * @namespace Session
 * @brief     Provides session handling to the masses
 */
namespace Session {
	boolean active = false;
	
	array   PersistentData;
	array   OldPushData, NewPushData;
	string  SessionVoucher, SessionID;
	string  SessionVoucherCookieName = 'webframework-session-voucher';
	string  SessionCookieName = 'webframework-session-id';
	
	function generateID() {
		return 'webframework';
	}
	function start() {
		array cookies = request.cookies();
		if( not cookies.keyExists(.SessionCookieName) ) {
			.SessionID = .generateID();
			.SessionVoucher = Voucher.reserve(.SessionID);
		} else {
			array voucher;
			.SessionID = cookies[.SessionCookieName];
			.SessionVoucher = cookies[.SessionVoucherCookieName];
			monitor {
				metrics.checkpoint("Loading session data! [${.SessionVoucher}, ${.SessionID}]");
				voucher = Voucher.fetch(.SessionVoucher, .SessionID);
				.OldPushData = voucher['PushData'];
				.PersistentData = voucher['PersistentData'];
				metrics.checkpoint("Session data loaded");
			} handle {
				metrics.checkpoint('Session load failed!');
				.SessionID = .generateID();
				.SessionVoucher = Voucher.reserve(.SessionID);
				.PersistentData = [];
				.OldPushData = [];
			}
		}
		// Store the session cookie
		.NewPushData = [];
		request.setCookie("${.SessionCookieName}=${.SessionID}; path=/");
		request.setCookie("${.SessionVoucherCookieName}=${.SessionVoucher}; path=/");
		.active = true;
	}
	function shutdown() {
		if( .SessionVoucher ) {
			// Store the session
			array voucher = [ 'PushData' => .NewPushData, 'PersistentData' => .PersistentData ];
			monitor {
				metrics.checkpoint("Storing session data! [${.SessionVoucher}, ${.SessionID}]");
				Voucher.complete( .SessionVoucher, voucher );
				metrics.checkpoint("Session stored ${.PersistentData}");
			} handle {
				metrics.checkpoint("Session store failed");
				Voucher.delete(.SessionVoucher);
			}
		}
		.active = false;
	}
	/**
	 * @function delete
	 * @declaration function delete()
	 * @brief Delete the current session
	 */
	function delete() {
		request.setCookie("${.SessionCookieName}=; path=/");
		request.setCookie("${.SessionVoucherCookieName}=; path=/");
		Voucher.delete(.SessionVoucher);
	}
	/**
	 * @function pushValueToAction
	 * @declaration function pushValueToAction( string action, void data )
	 * @brief Push a value to another action, this is a one shot mechanism. This means that when the action is next run, 
			the data will not remain persistent. This allows you to send information, via the session to another page whilst
			avoiding messy URLs or hidden variables that are susceptible to attack.
	 * @param string action The action to send the information to
	 * @param void data The data to send
	 */
	function pushValueToAction( string action, void data ) {
		.NewPushData[action] = data;
	}
	/**
	 * @function hasValueForAction
	 * @declaration function hasValueForAction( string action )
	 * @brief Check to see if there is a value in the session cache for the action.
	 * @warning When working with GUIKit.Pages you do not need to call this function. The Page will call 
			pageLoaded( void data ), if no such function exists, it'll call pageLoaded having set the value 
			'pushData'.
	 * @param string action The action to check against
	 * @return true if data exists, false otherwise
	 */
	function hasValueForAction( string action ) 
		return .OldPushData.keyExists(action);
	/**
	 * @function valueForAction
	 * @declaration function valueForAction( string action )
	 * @brief Fetch the value for the given action
	 * @param string action The action to get the value from
	 * @return The data, void otherwise
	 * @warning When working with GUIKit.Pages you do not need to call this function. The Page will call 
			pageLoaded( void data ), if no such function exists, it'll call pageLoaded having set the value 
			'pushData'.
	 */
	function valueForAction( string action ) {
		if( .OldPushData.keyExists(action) ) 
			return .OldPushData[action];
		return nowt;
	}
	/**
	 * @function storeValue
	 * @declaration function storeValue( string name, void value )
	 * @brief Store a named value within the session cache. This data will remain until deleted or replaced.
	 * @param string name The name of the value
	 * @param void value The value to store
	 */
	function storeValue( string name, void value ) {
		.PersistentData[name] = value;
	}
	function removeValue( string name ) {
		if( .PersistentData.keyExists(name) ) {
			Array.del(.PersistentData, name);
		}
	}
	/**
	 * @function value
	 * @declaration function value( string name )
	 * @brief Fetch a value out of the session cache
	 * @param string name The name of the value to fetch
	 * @return The value if it exists, void otherwise.
	 */
	function value( string name ) {
		return .value( name, nowt );
	}
	/**
	 * @function value
	 * @declaration function value( string name, void defaultValue )
	 * @brief Fetch a named value, if the value doesn't exist return the default provided value
	 * @param string name The name of the value
	 * @param void defaultValue A default value to use if the value doesn't exist within the Session cache.
	 * @return A value or default value otherwise.
	 */
	function value( string name, void defaultValue ) {
		if( .PersistentData.keyExists(name) ) 
			return .PersistentData[name];
		return defaultValue;
	}
	function attribute_missing( string name )
		return .value(name);
}
/**
 * @end
 */

namespace ViewState {
	function delete( string page, object user ) {
		if( user and not (user.username == 'guest') ) {
			object viewState = webframework.ViewState.pageForUser(user.id, page);
			if( viewState ) {
				viewState.delete();
			}
		}
	}
	function fetch( string page, object user ) {
		if( not user or user.username == 'guest' ) {
			return Session.value(GUIKit.ViewState, []);
		} else {
			object viewState = webframework.ViewState.pageForUser(user.id, page);
			if( viewState ) {
				return Serialize.fromNative(String.base64decode(viewState.content));
			}
			return [];
		}
	}
	function store( string page, object user ) {
		if( not user or user.username == 'guest' ) {
			Session.storeValue(GUIKit.ViewState, Cache.display.generateViewState(Cache.persistence));
		} else {
			object viewState = webframework.ViewState.pageForUser(user.id, page);
			if( not viewState ) {
				viewState = new webframework.ViewState();
			}
			viewState.setValue('user_id', user.id);
			viewState.setValue('action', page);
			viewState.setValue('content', String.base64encode(Serialize.toNative(Cache.display.generateViewState(Cache.persistence))));
			viewState.setValue('timestampLastTimeStored', Date.GMTnow());
			viewState.save();
		}
	}

	function delete( string page )
		return .delete( page, Permissions.fetchUserObject() );
	function fetch( string page )
		return .fetch( page, Permissions.fetchUserObject() );
	function store( string page ) 
		return .store( page, Permissions.fetchUserObject() );
}
