
namespace modifies GUIKit {
    
    class TextField extends GUIKit.View {
		
		static function formValue( void value ) {
			if( value isa string )
				return value;
			if( value isa array ) {
				if( Array.size(value) == 1 and not value.keyExists('New') ) {
					return '';
				} else {
					return value['New'];
				}				
			}
			return '';
		}
		string maxLength;
		
		function handleFormValue( void value ) {
			.setTextValue(GUIKit.TextField.formValue(value));
		}
		
        function defaultWidth()
            return "";
        function setMaxLength( void length ) {
			.maxLength = "$length";
		}
		function onKeyPress() {
			if( .defaultAction and Cache.components.keyExists(.defaultAction) ) {
				return "onkeypress=\"if(captureEnterKey(event)){ return DefaultAction('${.defaultAction}'); } else { return true; }\"";
			} 
			return "onkeypress=\"return !captureEnterKey(event)\"";
		}
		
        function render() {
			if( .visible() ) {
				array values = .generateTemplateAttributes('wfTextField');
				values['EventCode'] += .onKeyPress();	
				values['MaxLength'] = (.maxLength ? 'maxlength="' + .maxLength + '"' : '');
				values['TextValue'] = Regexp.replaceAll('"', values['TextValue'], '&quot;');
				return .templateRender('ComponentTextField', values);
			}
			return "";
        }                    
    }
}
