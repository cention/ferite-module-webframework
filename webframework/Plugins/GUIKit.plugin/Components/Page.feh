namespace modifies GUIKit {
	
	boolean isBackgroundEvent = false;

	class Page extends GUIKit.EventHandler {
		
		static string PageID = '__PAGEID__';
		static array PageCache;

		static array ValidSubActions;	   
		directive sub_action( string name ) {
			self.ValidSubActions[name] = true;		   
		}
		static function validSubAction( string name ) {
			return Array.keyExists( self.ValidSubActions, name );
		}

		static function checkStaticVariables() {
			object k = new Class(self);
			array variables = k.getVariables();
			if( not (variables.keyExists('persistenceArray')) ) {
				log('Page.checkStaticVariables', "Creating Static Variables [${Class.name(self)}]");
				eval( "class modifies ${Class.name(self)} { 
							static array persistenceArray; 
							static array persistenceVariables;
							static array linkedObjects;
							static array mcamRequests;
							static array mcamChannels;
							static array commandHooks; }" );
			}
		}
		// This is the persistence layer that we can place things within the viewstate
		directive persist( string name ) {
			.checkStaticVariables();
			.persistenceArray[] = name;
		}
		directive persist( string type, string name ) {
			.checkStaticVariables();
			.persistenceArray[] = name;
			.persistenceVariables[name] = type;
		}
		directive component( ... ) {
			.checkStaticVariables();
			Array.each(arguments()) using ( name ) {
				.linkedObjects[name] = true;
			};
		}
		directive mcam_request( string request_name ) {
			.checkStaticVariables();
			log('Page.mcam_request', request_name + " -> " + Class.name(self));
			.mcamRequests[] = request_name;
		}
		directive mcam_channel( string request_name ) {
			.checkStaticVariables();
			log('Page.mcam_channel', request_name + " -> " + Class.name(self));
			.mcamChannels[] = request_name;
		}
		directive command( string command_name, string function_name ) {
			.checkStaticVariables();
			.commandHooks[command_name] = [ true, function_name ];
		}
		directive hidden_command( string command_name, string function_name ) {
			.checkStaticVariables();
			.commandHooks[command_name] = [ false, function_name ];
		}
	    static function clearBindings() {
			.persistenceVariables = [];
			.persistenceArray = [];
			.linkedObjects = [];
			.mcamRequests = [];
			.mcamChannels = [];
			.commandHooks = [];
		}
		// Get an array of linked objects
		static function linkedObjects() {
			array returnValue;
			
			monitor {
				.linkedObjects.keys().each() using ( component ) {
					returnValue[] = component;
				};
			} handle { 
				returnValue = [];
			}
			monitor {
				array parentLinkedObjects = super.linkedObjects();
				while( parentLinkedObjects )
					returnValue.push(parentLinkedObjects.pop());
			} handle { 
				returnValue = returnValue;
			}
			return returnValue;
		}
		// Get an array of persistant variables
		static function persistentValues() {
			array returnValue;
			
			monitor {
				.persistenceArray.each() using ( variable ) {
					returnValue[] = variable;
				};
			} handle { 
				.returnValue = [];
			}
			monitor {
				array parentLinkedObjects = super.persistentValues();
				while( parentLinkedObjects )
					returnValue.push(parentLinkedObjects.pop());
			} handle { 
				returnValue = returnValue;
			}
			return returnValue;
		}

		array dynamicMCAMHandlers;
		function registerDynamicMCAMHandler( string name, object receiver ) {
			.dynamicMCAMHandlers[name] = receiver;
		}

		static constructor {
			string classChanges = '';
			.checkStaticVariables();
			classChanges = "class modifies ${Class.name(self)} { ";
			Array.each(.linkedObjects.keys() ) using ( name ) {
				classChanges += "object $name;";
			};
			Array.map(.persistenceVariables) using ( name, type ) {
				classChanges += "$type $name;";
			};
			classChanges += "function handleMCAMRequest( string name, array parameters ) { 
								if( .dynamicMCAMHandlers.keyExists(name) ) {
									string result = '' + .dynamicMCAMHandlers[name].handleMCAMCommand( name, parameters );
									if( result ) {
										return result;
									}
								}
								switch( name ) {";
			Array.each(.mcamRequests) using ( request_name ) {
				classChanges += "case \"$request_name\": {";
				classChanges += "	void r = .$request_name( parameters ); 
									return HTML.MCAMChannel('Result', name, '' + r);";
				classChanges += "} ";
			};
			Array.each(.mcamChannels) using ( request_name ) {
				classChanges += "case \"$request_name\": {";
				classChanges += "	return .$request_name( parameters );";
				classChanges += "} ";
			};
			classChanges += " default:
								return super.handleMCAMRequest( name, parameters );
							} }";
							
			classChanges += "function handleApplicationCommands {";
			if( .commandHooks ) {
				classChanges +=	"	object match = null;";
				classChanges += "	if( application.commands ) {";
				Array.map(.commandHooks) using ( command, functionDetails ) {
					object r = new Regexp('\(([A-Za-z0-9]+)(:(string|number|boolean))?\)');
					string functionName = functionDetails[1];
					boolean visible = functionDetails[0];
					array named_captures = [];
					string command_match = r.replaceAll(command) using ( match ) {
						string type = 'string';
						string type_capture = '[A-Za-z0-9 ]+';
						if( match.capture(2) ) {
							type = match.capture(2);
						}
						switch( type ) {
							case 'string':
								type_capture = '[A-Za-z0-9]+';
								break;
							case 'number':
								type_capture = '[+-]?[0-9]+';
								break;
							case 'boolean':
								type_capture = 'true|false';
								break;
						}
						named_captures[] = [ match.capture(0), type ];
						return "($type_capture)";
					};
					command_match = "^$command_match\$";
					classChanges += "	if( (match = Regexp.match('$command_match', application.commands.join('/'))) ) {";
					classChanges += "		void return_value; array values = [];";
					named_captures.eachWithIndex() using ( item, index ) {
						string name = item[0];
						string type = item[1];
						
						switch( type ) {
							case 'string':
								classChanges += "		values['$name'] = match.capture($index);";
								break;
							case 'number':
								classChanges += "		values['$name'] = match.capture($index).toNumber();";
								break;
							case 'string':
								classChanges += "		values['$name'] = (match.capture($index) == 'true' ? true : false);";
								break;
						}
					};
					classChanges += "		return_value = .$functionName( values );";
					classChanges += "		.commandRun = '$functionName';";
					classChanges += "		.hasRunCommand = true;";
					if( not visible ) {
						classChanges += "		.publishPersistence();";
						classChanges += "		Application.performAction(application.action);";
					} else {
						classChanges += "	if( return_value )";
						classChanges += "		return return_value;";
						classChanges += "	return false;";
					}
					classChanges += "	}";
				};
				classChanges += "		return super.handleApplicationCommands();";
				classChanges += "	}";
			}
			classChanges += "	return false;";
			classChanges += "}";
							
							
			classChanges += " }";
			eval(classChanges);
		}
		
		object renderEngine;
		string action;
		array  commands;
		array  parameters;
		array  validators;	// The validators
		number valid;		// Is the page valid ?
		boolean firstLoad;
		boolean hasRunCommand = false;
		string  commandRun;
		
		static function load( string page, array commands, array parameters ) {
			void __PageKlass__;
			string cpath = pathForPageCode( page );
			string tpath = page;
			string tmp;

			metrics.checkpoint( "Page.load: loading page class" );
			if( not Array.keyExists( .PageCache, page ) ) {
				if( cpath != "" ) {
					log('Page.load', "include path: $cpath");
					__PageKlass__ = include( cpath );
					tmp = __PageKlass__.getTemplateName();
					if( tmp != "" )
						tpath = tmp;
				}
				else
					__PageKlass__ = GUIKit.Page;
				.PageCache[page] = __PageKlass__;
			} else {
				__PageKlass__ = .PageCache[page];
			}
			metrics.checkpoint("Page.load: done class load: ${__PageKlass__}");
			if( __PageKlass__ != null )
			{
				string contenttype = __PageKlass__.getContentType();
				object pageobj = new __PageKlass__(page);
				object wrapper = new Object(pageobj), component;
				void   renderClass = GUIKit.Render.renderEngineForType(contenttype);
				string lastPage = Session.value('__PREVIOUS_PAGE__', '');
				array  viewstate = Session.value(GUIKit.ViewState, []);
				number waterMark = 0;
				array  persistentValues;
				
				if( commands and commands[0] == 'MCAM' )
					GUIKit.isBackgroundEvent = true;
					
				if( lastPage != page )
					viewstate = [];
				Session.storeValue('__PREVIOUS_PAGE__', page);
				
				currentPage = pageobj;
				Cache.page = pageobj;
				pageobj.setCommandParameters( page, commands, parameters );
				pageobj.firstLoad = false;

				Cache.display = new renderClass();
				pageobj.setRenderEngine( Cache.display );
				metrics.checkpoint("Checking page cache");
				if( Cache.checkPageCache( tpath, contenttype, __PageKlass__, pageobj ) ) {
					metrics.checkpoint("reseting view state");
					viewstate = [];
				}
				metrics.checkpoint("Loading components");
				Cache.loadPageComponents( tpath );

				if( Array.size(Cache.components) > 0 ) {
					void  actionValue;
					
					pageobj.bindComponents();
					
					component = pageobj.objectForID('PageTitle');
					if( component and component.textValue == '' )
						component.setTextValue( application.virtualName + ' - ' + page );
					component = pageobj.objectForID('PageUsername');
					if( component ) {
						object u = Permissions.fetchUserObject();
						component.setTextValue( (u ? u.toName() : 'Guest') );
					}
					component = pageobj.objectForID('PageCurrentDate');
					if( component )
						component.setTextValue( I('Current Date: {0:date string}').expand( formatDate(Date.now()) ) );

					actionValue = Session.valueForAction(application.action);
					metrics.checkpoint("$parameters");

					Array.map( Cache.persistence ) using ( string key, void value ) {
						metrics.checkpoint("Restoring $key: $value");
						wrapper.setVariable( key, value );
					};
					
					pageobj.firstLoad = not (parameters.keyExists('uieventcomponent') or GUIKit.isBackgroundEvent);
					if( parameters.keyExists('uieventcomponent') or GUIKit.isBackgroundEvent or viewstate ) {
						// Event processing
						object actionObject = null;
						void potentialPage;
						
						log('Page.load', "Got second load");
						metrics.checkpoint("checking static variables");
						.checkStaticVariables();
						metrics.checkpoint("view state keys: ${viewstate.keys()} ${viewstate.size()}");
						persistentValues = Cache.display.processViewState( viewstate );
						Array.map( persistentValues ) using ( string key, void value ) {
							metrics.checkpoint("Restoring $key: $value");
							wrapper.setVariable( key, value );
						};

						// We need to go through the variables and update their properties
						Array.each( parameters.keys() ) using ( obj ) {
							if( Cache.components.keyExists(obj) )
								Cache.components[obj].handleFormValue( parameters[obj] );
						};

						// Validate
						if( pageobj.processValidators() ) {
							if( not pageobj.handleApplicationCommands() ) {
								// Notify the page object that is has been loaded
								metrics.checkpoint("&rarr; Running invokePageLoaded()");
								potentialPage = pageobj.invokePageLoaded(actionValue);
								metrics.checkpoint("&larr; Done running invokePageLoaded()");

								// Invoke event handlers
								waterMark = Sys.timestamp();
							
								if( potentialPage isa void ) {
									string uieventcomponent = (parameters.keyExists('uieventcomponent') ? parameters['uieventcomponent'] : '');
									string uieventdata = (parameters.keyExists('uieventdata') ? parameters['uieventdata'] : '');
									string uieventextra = (parameters.keyExists('uieventextra') ? parameters['uieventextra'] : '');
									
									actionObject = Cache.display.objectForID( uieventcomponent );
									if( actionObject != null )
										actionObject.setupEvent( uieventdata );
								
									if( actionObject or GUIKit.isBackgroundEvent ) {
										if( GUIKit.isBackgroundEvent ) {
											string returnXML = '';
											monitor {
												void request_result;
												string request_id = '';
												if( actionObject ) {
													request_id = actionObject.id;
													request_result = actionObject.handleEvent( uieventdata, uieventextra );
													if( request_result ) {
														returnXML = HTML.MCAMChannel('Result', request_id, request_result);
													}
												} else {
													request_id = commands[1];
													returnXML += pageobj.handleMCAMRequest( request_id, parameters );
												}
											} handle ( error ) {
												returnXML = HTML.MCAMChannel('Error', "${err.str + ', backtrace: ' + error.backtrace()}");
											} else {
												Cache.components.each() using ( component ) {
													if( component.lastChange >= waterMark )
														returnXML += component.renderForMCAM();
												};
											}
											// Send back the information
											Request.current().contentType('text/xml; charset=UTF-8');
											return HTML.MCAMEnvelope(returnXML);
										} else {
											metrics.checkpoint("&rarr; Running Event Handler");
											potentialPage = actionObject.handleEvent( uieventdata, uieventextra );
											metrics.checkpoint("&larr; Running Event Handler");
										}
									} else { 
										// We have no action
										metrics.checkpoint("&rarr; Running Default Handler");
										potentialPage = pageobj.defaultAction( uieventcomponent, uieventdata, uieventextra );
										metrics.checkpoint("&larr; Running Default Handler");
									}
								}
								if( not (potentialPage isa void) ) {
									return '' + potentialPage;
								}
							}
						}
					} else {
						pageobj.firstLoad = true;
						if( not pageobj.handleApplicationCommands() )
							pageobj.invokePageLoaded(actionValue);
					}
				} else {
					pageobj.firstLoad = true;
					if( not pageobj.handleApplicationCommands() )
						pageobj.invokePageLoaded(actionValue);
				}
				pageobj.pageFinished();
				pageobj.publishPersistence();
				request.contentType( contenttype );
				metrics.checkpoint("Cache loading of page");
				return Cache.loadPage( tpath );
			}
			Sys.error( "Unable to obtain page class for $page.", 0 );
		}

		function bindComponents() {
			array unknownComponents;
			void __PageKlass__ = self.getClass();
			object wrapper = new Object(self);
			
			log('Page.bindComponents', 'Components: ' + Cache.components.keys());
			// Bind the components
			metrics.checkpoint("Setting up object bindings");
			Array.each( __PageKlass__.linkedObjects() ) using ( key ) {
				if( Cache.components.keyExists(key) ) {
					object component = Cache.components[key];
					wrapper.setVariable(key, component);
				} else {
					unknownComponents[] = key;
				}
			};
			if( unknownComponents.size() > 0 ) {
				raise new Error( "Request to bind the components ${Array.join(unknownComponents,', ')} failed! (Do they exist within the Page file ?)" );
			}
		}
		function publishPersistence() {
			object wrapper = new Object(self);
			array  persistentValues;
			persistentValues = [];
			Array.each( self.getClass().persistentValues() ) using ( string variable ) {
				metrics.checkpoint("Storing $variable: ${wrapper.getVariable(variable)}");
				persistentValues[variable] = wrapper.getVariable(variable);
			};
			Cache.persistence = persistentValues;
		}

		function setCommandParameters( string action, array commands, array parameters ) {
			.action = action;
			.commands = commands;
			.parameters = parameters;
		}
		function defaultAction( string origin, string event, string extra );

		function registerValidator( object value ) {
			.validators[] = value;
		}
		function handleMCAMRequest( string name, array parameters ) {
			raise new Error('Unable to find MCAM request handler for ' + name);
		}
		function handleApplicationCommands {
			return false;
		}
		function processValidators() {
			number valid = true;	
			.validators.each() using ( validator ) {
				if( not validator.validate() )
					valid = false;
			};
			.valid = valid;
			return .valid;
		}
		function setRenderEngine( object r )
			.renderEngine = r;

		function renderEngine()
			return .renderEngine;

		function useTemplate( string t )
			.renderEngine.loadTemplate( t );

		static function getTemplateName()
			return '';

		static function getContentType()
			return 'text/html; charset=UTF-8';

		static function getWrapperTemplateName() 
			return 'Default';

		function generatedPage()
			return .renderEngine.renderWithPage( self );

		function initialiseComponents()
			return false;
		
		function invokePageLoaded( void data ) {
			.setupFeatureSystem();
			if( GUIKit.isBackgroundEvent ) {
				.backgroundPageLoaded(data);
			} else {
				.pageLoaded(data);
			}
		}
		void pushData;
		function backgroundPageLoaded() ;
		function backgroundPageLoaded( void data ) 	{
			.pushData = data;
			.backgroundPageLoaded();
		}
		function pageLoaded() ;
		function pageLoaded( void data ) {
			.pushData = data;
			.pageLoaded();
		}
		
		function pageFinished
			;
		function objectForID( string id ) {
			return .renderEngine.objectForID( id );
		}
		function getTitle() 
			return Config.config['SiteTitle'];
		function getHeaders()
			return GUIKit.requiredCSSHeaders() +
				'<!--[if gte IE 5.5]>
				<![if lt IE 7]>
				<script type="text/javascript" charset="utf-8">
					registerLoadFunction(function(){ registerLoadFunction( function() {
						var arVersion = navigator.appVersion.split("MSIE")
						var version = parseFloat(arVersion[1])

						if ((version >= 5.5) && (document.body.filters)) 
						{
							alert("fnat");
						   for(var i=0; i<document.images.length; i++)
						   {
							  var img = document.images[i]
							  var imgName = img.src.toUpperCase()
							  if (imgName.substring(imgName.length-3, imgName.length) == "PNG")
							  {
								 var imgID = (img.id) ? "id=\'" + img.id + "\' " : ""
								 var imgClass = (img.className) ? "class=\'" + img.className + "\' " : ""
								 var imgTitle = (img.title) ? "title=\'" + img.title + "\' " : "title=\'" + img.alt + "\' "
								 var imgStyle = "display:inline-block;" + img.style.cssText 
								 if (img.align == "left") imgStyle = "float:left;" + imgStyle
								 if (img.align == "right") imgStyle = "float:right;" + imgStyle
								 if (img.parentElement.href) imgStyle = "cursor:hand;" + imgStyle
								 var strNewHTML = "<span " + imgID + imgClass + imgTitle
								 + " style=\"" + "width:" + img.width + "px; height:" + img.height + "px;" + imgStyle + ";"
								 + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
								 + "(src=\\'" + img.src + "\\', sizingMethod=\'scale\');\"></span>"
								 img.outerHTML = strNewHTML
								 i = i-1
							  }
						   }
						}
					})});
				</script>
				<![endif]>
				<![endif]-->';
		function requiredJavascript
			return [ /* 1st Party Titles */ 'Debug', 'General', 'Validator', 'Hotkey', 'MCAM', 
					 /* 3rd Party Titles */ 'jquery', 'prototype', 
					 'scriptaculous/builder', 
					 'scriptaculous/effects', 
					 'scriptaculous/dragdrop', 
					 'scriptaculous/controls', 
					 'scriptaculous/slider', 
					 'scriptaculous/sound', 
					 'scriptaculous/scriptaculous', 
					 'fckeditor/fckeditor',
					 'Component/Component.js' ];

		function getJavascriptIncludes {
			string compressed = application.virtualName + '-Uncompressed';
			string compressedURI = uriForJavascriptResource('Generated/' + compressed);
			string headers = "<!-- Runtime generated $compressed: $compressedURI -->";
			if( Config.Debug or (not compressedURI) ) {
				.requiredJavascript().append(GUIKit.requiredJavascriptHeaders()).each() using ( js ) {
					string uri = uriForJavascriptResource((js - '.js'));
					if( not uri ) {
						uri = __uriFor( 'Support', js, 'Components' );
					}
					uri and headers += HTML.javascriptHeader(uri);
				};
			} else {
				headers += HTML.javascriptHeader(compressedURI);
			}
			return headers;
		}
		function getRequiredJavascript {
			return .requiredJavascript().append(GUIKit.requiredJavascriptHeaders());
		}
		function setupFeatureSystem
			;
		function actionAccessAllowed( string url )
			return true;
			
		static function DOCTYPE_header() {
			return
			"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
				\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"
				[
					<!ENTITY % HTMLsymbol PUBLIC
					    \"-//W3C//ENTITIES Symbols for XHTML//EN\"
					    \"${__pathForResource('DTD/xhtml-symbol.ent','Templates')}\">
					 %HTMLsymbol;
					<!ENTITY % HTMLspecial PUBLIC
				        \"-//W3C//ENTITIES Special for XHTML//EN\"
				        \"${__pathForResource('DTD/xhtml-special.ent','Templates')}\">
				     %HTMLspecial;
				    <!ENTITY % HTMLlat1 PUBLIC
				       \"-//W3C//ENTITIES Latin 1 for XHTML//EN\"
				       \"${__pathForResource('DTD/xhtml-lat1.ent','Templates')}\">
				    %HTMLlat1;
				]
			>";
		}
   }
}
