
namespace modifies GUIKit {
	
	protocol AJAXListHandler {
		function handleNew( object handler, string &type, string &id, array values );
		function handleEdit( object handler, string type, string id );
		function handleDelete( object handler, string type, string id );
		function handleConfirm( object handler, string type, string &id, array values );
		function handleCancel( object handler, string type, string id );
		function handleSelect( object handler, string type, string id );
		function handleSearch( object handler, string criteria );
		
		function reloadData( object sender ) { }
		function numberOfItems( object sender );		
		function renderForItem( object sender, number index );
		function identifierForItem( object sender, number index );
		function variantForItem( object sender, number index );
		function didSelectItem( object sender, string id );
	}
	
	class AJAXList extends GUIKit.View implements GUIKit.AJAXListHandler {
		
		static final string NoID = 'GUIKit.AJAXLIST.NoID';
		
		////////////////////////////////////////////////////////////////////////
		function handleNew( object handler, string &type, string &id, array values ) { return ''; }
		function handleEdit( object handler, string type, string id ) { return ''; }
		function handleDelete( object handler, string type, string id ) { return ''; }
		function handleConfirm( object handler, string type, string &id, array values ) { return ''; }
		function handleCancel( object handler, string type, string id ) { return ''; }
		function handleSelect( object handler, string type, string id ) { return ''; }
		function handleSearch( object handler, string criteria );
		
		function reloadData( object sender ) { }
		function numberOfItems( object sender ) { return 0; }
		function identifierForItem( object sender, number index ) { return ''; }
		function renderForItem( object sender, number index ) { return ''; }
		function variantForItem( object sender, number index ) { return ''; }
		function didSelectItem( object sender, string id ) { }
		////////////////////////////////////////////////////////////////////////
		
		function initialiseComponent() {
			super.initialiseComponent();
			
			.setDataSource( self );
			.registerEventHook( self, "handleAJAXEvent", GUIKit.EvAJAX );
			.registerEventHook( self, "handleClickEvent", GUIKit.EvClick );
			if( Array.keyExists(applicationArgs, "${.id}SelectedID" ) ) {
				.setSelectedID( applicationArgs["${.id}SelectedID"] );
			}			
		}
		number wantDidSelectEvent = 1;
		function setWantDidSelectEvent( number value ) {
			.wantDidSelectEvent = value;
		}
		function handleClickEvent( object source, string extra ) {
			if( .wantDidSelectEvent ) {
				.selectedID = extra;
				return .dataSource.didSelectItem( self, extra );
			}
		}
		
		object dataSource;
		function setDataSource( object ds )
			.dataSource = ds;
		string targetContainer;
		function setTargetContainer( string value ) {
			.targetContainer = value;
		}
		string selectedID;
		function selectedID()
			return .selectedID;
		function setSelectedID( string value )
			.selectedID = value;
		function setSelectedID( void value )
			.selectedID = "$value";
		string changeFunction;
		function setChangeFunction( string value )
			.changeFunction = value;
		number retainActiveOnNew = 0;
		function setRetainActiveOnNew( number value )
			.retainActiveOnNew = value;
		function setRetainActiveOnNew( string value ) 
			.retainActiveOnNew = .stringToBoolean(value);
		number deleteTimeout = 3;
		function setDeleteTimeout( void value ) {
			string svalue = "$value";
			.deleteTimeout = svalue.toNumber();
		}
		static final string New = 'new-item';
		static final string Edit = 'edit-item';
		static final string Delete = 'delete-item';
		static final string Confirm = 'confirm-item';
		static final string Cancel = 'cancel-item';	
		static final string Select = 'select-item';
		static final string Search = 'search-item';
		static final string Reset = 'reset-search-item';
		
		function extractID( string id ) {
			object r = new Regexp('[^{]+{([^}]*)}');
			object m = r.match(id);
			if( m ) {
				return m.capture(0);
			}
			return '';
		}
		function handleAJAXEvent( object sender, string extra ) {
			string id = applicationArgs['Identifier'];
			string return_data = '';
			void values = applicationArgs["${.id}WFListValues"];
			
			request.contentType( "text/html; charset=UTF-8" );
			switch( applicationArgs['Type'] ) {
				case GUIKit.AJAXList.New: {
					string type = extra;
					string data = .dataSource.handleNew( self, type, id, ( values isa void ? [] : values ) );
					return_data = .wrapItemForRender( id, type, data );
					break;
				}
				case GUIKit.AJAXList.Edit: {
					return_data = .dataSource.handleEdit( self, extra, id );
					break;
				}
				case GUIKit.AJAXList.Delete: {
					return_data = .dataSource.handleDelete( self, extra, id );
					break;
				}
				case GUIKit.AJAXList.Confirm: {
					string data = .dataSource.handleConfirm( self, extra, id, ( values isa void ? [] : values ) );
					return_data = .wrapItemForRender( id, extra, data );
					break;
				}
				case GUIKit.AJAXList.Cancel: {
					return_data = .dataSource.handleCancel( self, extra, id );
					break;
				}
				case GUIKit.AJAXList.Select: {
					.selectedID = id;
					return_data = .dataSource.handleSelect( self, extra, id );
					break;
				}
				case GUIKit.AJAXList.Search: {
					.searchCriteria = '' + applicationArgs['AJAXListSearchCriteria' + .id];
					.dataSource.handleSearch( self, .searchCriteria );
					return_data = .renderList();
					break;
				}
			}
			if( return_data != '' ) {
				// Do some clever processing if we have the chance
				object r = new Regexp( '<script(language="javascript[^"]*"|type="text/javascript"|charset="[^"]*"| )*>(.*?)</script>', 'si' );
				// New viewstate
				return_data += Cache.display.viewStateForAJAX();
				// Convert any script blocks into a cunning ajax able execution block
				return_data = r.replaceAll( return_data ) using ( match ) {
					return HTML.ajax_javascript( match.capture(1) );
				};
			}
			return return_data;
		}
		function javascriptCallForID( string type, string variant, string id ) {
			return .javascriptCallForID( type, variant, id, [] );
		}
		function javascriptCallForID( string type, string variant, string id, string extra ) {
			return .javascriptCallForID( type, variant, id, [ extra ] );
		}
		function javascriptCallForID( string type, string variant, string id, array values ) {
			switch( type ) {
				case GUIKit.AJAXList.New: {
					string location = values[0];
					Array.shift(values);
					return "${.id}.New('$variant','${.id}','$id',$location," + (values.size() ? "['" + Array.join(values, "','") + "']" : "[]") + "); return false";
				}
				case GUIKit.AJAXList.Edit: {
					return "${.id}.Edit('$variant','${.id}Item{$id}','$id'); return false";
				}
				case GUIKit.AJAXList.Delete: {
					return "${.id}.Delete('$variant','${.id}Item{$id}','$id'); return false";
				}
				case GUIKit.AJAXList.Confirm: {
					return "${.id}.Confirm('$variant','${.id}Item{$id}','$id',['" + Array.join(values, "','") + "']); return false";
				}
				case GUIKit.AJAXList.Cancel: {
					return "${.id}.Cancel('$variant','${.id}Item{$id}','$id'); return false";
				}					
				case GUIKit.AJAXList.Select: {
					return "${.id}.Select('$variant','${.id}Item{$id}','$id'); return false";
				}
				case GUIKit.AJAXList.Search: {
					string input = values[0];
					return "${.id}.Search(document.getElementById('$input').value," + (values.size() ? "['" + Array.join(values, "','") + "']" : "[]") + " );return false";
				}
				case GUIKit.AJAXList.Reset: {
					string input = values[0];
					Array.shift(values);
					return "document.getElementById('$input').value='';${.id}.Search('', [ ]);return false";					
				}
			}
			return '';
		}
		private string EventExtraID;
		function customExtra( string event ) {
			return .EventExtraID;
		}
		function wrapItemForRender( string id, string variant, string render ) {
			array values;
			values['StyleClass'] = .getStyleClass('wfList') + (.selectedID == id ? 'SelectedItem' : 'Item');
			values['TextValue'] = render;

			if( id != GUIKit.AJAXList.NoID ) {
				.EventExtraID = id;
				values['ID'] = "${.id}Item{$id}";
				values['TargetID'] = id;
				values['EventCode'] = (.targetContainer and id != '' ? "onclick=\"${.javascriptCallForID(GUIKit.AJAXList.Select,variant,id)}\" style=\"cursor:pointer;\"" : 
									   (.wantDidSelectEvent ? .eventHooks() : ''));
			}
			return GUIKit.ViewTemplate.render((.template ? "${.template}Item" : ''), 'ComponentAJAXListItem', values);
		}

		string searchCriteria;
		function setSearchCriteria( string value ) 
			.searchCriteria = value;

		function generateAttributes() {
			array attrs = super.generateAttributes();
			attrs['SearchCriteria'] = .searchCriteria;
			attrs['SelectedID'] = .selectedID;
			attrs['ChangeFunction'] = .changeFunction;
			attrs['RetainActiveOnNew'] = .retainActiveOnNew;
			attrs['DeleteTimeout'] = "${.deleteTimeout}";
			return attrs;
		}
		function pushContent( string content, string styleclass ) {
			.contents[] = [ 'EventCode' => '', 'TextValue' => content, 'StyleClass' => .getStyleClass('wfList') + styleclass ];
		}
		array contents;
		function renderList() {
			array containerContents;
			string selectedVariant;
			number count = .dataSource.numberOfItems(self);
			array values = .generateTemplateAttributes('wfList');
			metrics.checkpoint("Render: ${.id}: Start");
			values['SelectedID'] = "${.id}SelectedID";
			values['TargetURI'] = uriForCurrentPageActions();
			values['TargetContainer'] = .targetContainer;
			values['SelectedIDValue'] = .selectedID;
			if( .changeFunction )
				values['ChangeFunction'] = .changeFunction;
			
			.contents = [];
			for( number i = 0; i < count; i++ ) {
				string id = '' + .dataSource.identifierForItem(self, i);
				string render = '' + .dataSource.renderForItem(self, i);
				string variant = '' + .dataSource.variantForItem(self, i);
				if( id == .selectedID )
					selectedVariant = variant;
				.contents[] = .wrapItemForRender( id, variant, render );
			}
			values['Items'] = .contents;
			metrics.checkpoint("Render: ${.id}: End");
			return .templateRender('ComponentAJAXList', values);
		}
		function render() {
			if( .visible() ) {
				.dataSource.reloadData(self);
				return .renderList();
			}
			return '';
		}
	}	

	class AJAXListButton extends GUIKit.View {
		
		string list;
		string variant;
		string command = "new-item";
		string location = "Append";
		string input;
		string items;
		
		function defaultWidth() 
			return '';
		function setList( string value ) 
			.list = value;
		function setVariant( string value )
			.variant = value;
		function setCommand( string value )
			.command = value;
		function setLocation( string value )
			.location = value;
		function setItems( string value )
			.items = value;
		function setInput( string value )
			.input = value;
		
		function hasEventHook( string type )
			return true;
		
		function render() {
			if( .visible() ) {
				object listObject = Cache.getComponent(.list);
				array  values = String.toArray(.items, ",");
				if( .input == '' )
					Array.unshift( values, .location + 'Content' );
				else
					Array.unshift( values, .input );
					
				if( listObject ) {
					array templateValues = .generateTemplateAttributes('wfButton');
					string variant = '';
					if( not .enabled ) 
						variant = 'Disabled';				
					templateValues['EventCode'] = "onclick=\"${listObject.javascriptCallForID(.command,.variant,'',values)}\"";
					return .templateRender('ComponentButton', variant, templateValues);
				} else { 
					return "<!-- If you are looking for the button '${.id}'/'${.textValue}', you might want to set the correct AJAXList -->";
				}
			}
			return '';
		}
	}
}

class modifies Obj {
	directive AJAXListBlankHandlers() {
		string code = "
		class modifies ${Class.name(self)} { 
			function handleNew( object handler, string &type, string &id, array values ) { return ''; }
			function handleEdit( object handler, string type, string id ) { return ''; }
			function handleDelete( object handler, string type, string id ) { return ''; }
			function handleConfirm( object handler, string type, string &id, array values ) { return ''; }
			function handleCancel( object handler, string type, string id ) { return ''; }
			function handleSelect( object handler, string type, string id ) { return ''; }
			function handleSearch( object handler, string criteria );
			
			function reloadData( object sender ) { }
			function numberOfItems( object sender ) { return 0; }
			function identifierForItem( object sender, number index ) { return ''; }
			function renderForItem( object sender, number index ) { return ''; }
			function variantForItem( object sender, number index ) { return ''; }
			function didSelectItem( object sender, string id ) { }
		}";	
		eval( code );						
	}
}
