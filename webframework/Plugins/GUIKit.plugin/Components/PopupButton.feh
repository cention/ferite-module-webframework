
namespace modifies GUIKit {
    
    class PopupButton extends GUIKit.View {
        array dataSource;
		
        function defaultWidth()
            return "";
        function setDataSource( array ds ) {
			.touch();
            .dataSource = ds;
        }
		function setSelectedItem( string value ) {
			.setTextValue( value );
		}
        function setSelectedItem( number index ) {
            .setTextValue( "$index" );
        }
        function selectedItem() {
            return String.toNumber(.textValue());
        }
		function labelForItem( void id ) {
			string value = '';
			string key = "$id";
			Array.each( .dataSource ) using ( element ) {
				string id = '';
				string description = '';
				string selected = '';
				if( element isa object ) {
					id = '' + element.objectID();
					description = '' + element.objectDescription();
				} else {
					id = '' + element[0];
					description = '' + element[1];
				}
				if( id == key ) {
					value = description;
					return false;
				}
            };	 
            return String.trim(value, ' '); 
		}
		function labelForSelectedItem() {
			return .labelForItem(.textValue());
		}
        function render() {	 
            if( .visible() ) {
				if( .enabled ) {
					array values = .generateTemplateAttributes('wfPopupButton'), items;
	                Array.each( .dataSource ) using ( element ) {
						string id = '';
						string description = '';
						string selected = '';
						if( element isa object ) {
							id = '' + element.objectID();
							description = '' + element.objectDescription();
						} else {
							id = '' + element[0];
							description = '' + element[1];
						}
						items[] = [ 
							'Value' => id, 
							'TextValue' => String.trim(description, ' '),
							'Selected' => (id == .textValue() ? true : false)];
	                };
					values['Items'] = items;
					return .templateRender('ComponentPopupButton', values);
				}
				else {
					object label = new GUIKit.Label();
					label.id = .id;
					label.setTextValue(.labelForItem(.selectedItem()));
					return label.render();
				}
            }
            return '';
        }                    
    }
}
