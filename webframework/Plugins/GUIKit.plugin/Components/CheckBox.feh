
namespace modifies GUIKit {
    
    class CheckBox extends GUIKit.View 
    {
        number state;

        function defaultWidth()
            return "";
		function setState( number state ) {
			.touch();
			.state = state;
		}
        function setState( string state ) {
            switch( String.toLower(state) )
            {
                case "true":
                case "on":
                    .state = true;
                    break;
                case GUIKit.NoValue:
                case "false":
                case "off":
                    .state = false;
                    break;
            }
        }
        function handleFormValue( string value ) {
            .setState( value );
        }
        function generateAttributes() {
            array attrs = super.generateAttributes();
            attrs['State'] = ( .state ? "on" : "off" );
            return attrs;
        }
        function clickCode() {
			string r = '';
			r += "var hiddenNode = document.getElementById('${.id}');";
			r += "var node = document.getElementById('CheckBox${.id}');";
			r += "if(this.tagName.toLowerCase() != 'input') node.checked = !node.checked;";
			r += "if( node.checked ) { hiddenNode.value = 'on'; } else { hiddenNode.value = 'off'; }";
			return r;
		}
		function customEventHook( string event ) {
			switch( event ) {
				case GUIKit.EvClick:
					return .clickCode();
			}
			return '';
		}
		function hasEventHook( string value ) {
			if( value == GUIKit.EvClick )
				return true;
			return super.hasEventHook(value);
		}
        function render() {
			if( .visible() ) { 
				array values = .generateTemplateAttributes('wfCheckBox');	
				string eventHooks = .eventHooks();
				
//				if( not super.hasEventHook( GUIKit.EvClick ) )
					eventHooks += " onclick=\"${.clickCode()}\"";
				
				values['CheckBoxID'] = "CheckBox" + .id;
				if( .enabled() ) {
					values['CheckBoxEventCode'] = eventHooks;
					values['LabelEventCode'] = eventHooks;
				}
				values['BooleanState'] = .state;
				return .templateRender( 'ComponentCheckBox', values );
			}
			return "";
        }
		function mcamRootNode() {
			return "${.id}Wrapper";
		}
		function debugContainer() {
			return .id + 'Wrapper';
		}                    
    }
}
