uses "/cention/etc/webframework-config.feh";
uses "webframework/webframework";
uses "posix";

global {
	array strings;
}

function GrabRCalls( string target, object matchI18N ) {
	File.open(target) using ( file ) {
		string contents = file.toString();
		matchI18N.matchAll(contents) using ( match ) {
			string word = match.capture(0).trim(" \r\n\t");
			if( word ) {
				Console.println(" + $word");
				strings[word] = true;
			}
		};
	};
}	
function GrabICalls( string target ) {
	GrabRCalls( target, new Regexp( "I\\([ \t]*'(.*?)'[ \t]*\\)" ) );
}
function GrabTCalls( string target ) {
	GrabRCalls( target, new Regexp('<i18n>(.*?)</i18n>') );
}

object matchPage = new Regexp( '(.*)\.page$' );
object scriptMatch = new Regexp( '(.*)\.(fe|feh|fec|js)$' );
object templateMatch = new Regexp( '(.*)\.(template|html)$' );

string applicationName = File.name(argv[0]) - ".app";

Console.println("i18nGenerateStrings.fe has been retired. Please use 'make gettext' in c3-beta instead");
Sys.exit(1);

application = new Application( applicationName );
// Server pages
Directory.open('${Config.PublicPath}/Pages') using ( item ) {
	if( matchPage.match(item) ) {
		string target = '';
		array  substrings = [];
		
		monitor {
			Console.println("Checking against: $item");
			// Load the wf generated strings
			target = "${Config.CachePath}Pages.$item.cache.strings.fe";
			substrings = include( target );
			Array.each( substrings ) using ( str ) {
				strings[str] = true;
			};
		} handle { 
			Console.println( "Error with file: $target" );
		}
		
		GrabICalls('../Server/Pages/' + item + '.fe');
	}
};

Console.println( "Walking directory ${argv[0]}" );
Directory.walk(argv[0]) using ( file ) {
	if( matchPage.match(file) ) {
		string target = '';
		array  substrings = [];
		
		monitor {
			Console.println("Checking against: $file");
			// Load the wf generated strings
			target = "${Config.CachePath}${applicationName}.app.Pages.${Regexp.replaceAll('/', Regexp.replaceAll('(.*)/Pages/', file, ''), '.')}.cache.strings.fe";
			substrings = include( target );
			Array.each( substrings ) using ( str ) {
				Console.println(" + $str");
				strings[str] = true;
			};
		} handle { 
			Console.println( "Error with file: $target" );
		}
	}
	if( scriptMatch.match(file) ) {
		Console.println('Walk[code]: ' + file);
		GrabICalls(file);
	}
	if( templateMatch.match(file) ) {
		Console.println('Walk[template]: ' + file);
		GrabTCalls(file);
		GrabICalls(file);
	}
};
Console.println( "Walking directory '${Config.PublicPath}/Support'" );
Directory.walk("${Config.PublicPath}/Support") using ( file ) {
	if( scriptMatch.match(file) ) {
		Console.println('Walk[code.server]: ' + file);
		GrabICalls(file);
	}
	if( templateMatch.match(file) ) {
		Console.println('Walk[template.server]: ' + file);
		GrabTCalls(file);
		GrabICalls(file);
	}
};

if( argv.size() > 1 ) {
	argv[1..].each() using ( file ) {
		Console.println("Scanning extra: $file");
		if( scriptMatch.match(file) ) {
			Console.println('Walk[code.server]: ' + file);
			GrabICalls(file);
		}
		if( templateMatch.match(file) ) {
			Console.println('Walk[template.server]: ' + file);
			GrabTCalls(file);
			GrabICalls(file);
		}
	};
}

Directory.make( argv[0] + '/Resources/Strings/', 0775 );
File.create( argv[0] + '/Resources/Strings/Master.strings.fe' ) using ( file ) {
	Console.println( "Writing file " + argv[0] + '/Resources/Strings/Master.strings.fe' );
	file.writeln( 'return [' );
	file.writeln(
			strings.keys().sort().join(",\n") using ( key ) {
				return "\t'${I18N.cleanString(key)}' => '${I18N.cleanString(key)}'";
			}
		);
	file.writeln( '];' );
};
