uses "/cention/etc/webframework-config.feh";
uses "webframework/webframework";

class modifies Directory {
	static function build( string path ) {
		array list = [];
		boolean change = false;
		list = path.toArray('/');
		list.eachWithIndex() using ( element, index ) {
			if( index > 0 ) {
				string directory = list[..index].join('/');
				object directory_o = Directory.open(directory);
				if( not directory_o ) {
					Directory.make(directory, 0755);
					change = true;
				}
			}
		};
		return change;
	}
}

string outputPath = "${Config.PublicPath}Resources/Javascript/Generated";
object matchPage = new Regexp( '(.*)\.page$' );
string completeJS = '';
array included = [];

application = new Application();
application.filePath = "${Config.PublicPath}/Applications/${argv[0]}.app/";
Cache.page = new GUIKit.Page();

Directory.build(outputPath);

File.remove("$outputPath/${argv[0]}-Uncompressed.js");
File.remove("$outputPath/${argv[0]}-Compressed.js");

Console.println(Cache.page.getClass().getWrapperTemplateName());
Console.println( "Walking directory ${Config.PublicPath}/Applications/${argv[0]}.app" );
Directory.walk("${Config.PublicPath}/Applications/${argv[0]}.app") using ( file ) {
	if( matchPage.match(file) ) {
		string target = '';
		array  substrings = [];
		
		monitor {
			// Load the wf generated strings
			target = "${Config.CachePath}${argv[0]}.app.Pages.${Regexp.replaceAll('/', file - (Config.PublicPath + '/Applications/' + argv[0] + '.app/Pages/'), '.')}.cache.javascript.fe";
			substrings = include( target );
			substrings.each() using ( js ) {
				string path = pathForJavascriptResource(js);
				if( not path ) {
					path = __pathFor( 'Support', js, 'Components' );
				}
				if( path and (not included.keyExists(path)) ) {
					Console.println('Including javascript: ' + js + ' [' + path + ']');
					included[path] = true;
					completeJS += File.open(path).toString();
				}
			};
		} handle { 
			target = '';
		}
	}
};

Console.println("Writing $outputPath/${argv[0]}-Uncompressed.js");
File.create( "$outputPath/${argv[0]}-Uncompressed.js", 0666 ) using ( file ) {
	file.write( completeJS );
};

Console.println("Generating $outputPath/${argv[0]}-Compressed.js");
Sys.system("java -jar yuicompressor.jar $outputPath/${argv[0]}-Uncompressed.js -o $outputPath/${argv[0]}-Compressed.js");

Console.println("Done!");
