uses "/cention/etc/webframework-config.feh";
uses "webframework/webframework";
uses "posix";

class modifies Directory {
	static function build( string path ) {
		array list = [];
		boolean change = false;
		list = path.toArray('/');
		list.eachWithIndex() using ( element, index ) {
			if( index > 0 ) {
				string directory = list[..index].join('/');
				object directory_o = Directory.open(directory);
				if( not directory_o ) {
					Directory.make(directory, 0755);
					change = true;
				}
			}
		};
		return change;
	}
}

function translationsForJavascript( string language, array catalog ) {
	string output = '';
	output += "// Desired language: $language\n";
	catalog.map() using ( key, translation ) {
		translation = Regexp.replaceAll("'", translation, "\\'");
		output += "TranslationDictionary['${JSProcessString(key)}'] = '$translation';\n";
	};
	return output;
}
function JSProcessString( string key ) {
	key = Regexp.replaceAll("\\\\", key, "\\\\\\");
	key = Regexp.replaceAll("'", key, "\\'"); 
	return key;
}

string outputPath = "${Config.PublicPath}Resources/Javascript/Generated";
string applicationName = argv[0];
string language = argv[1];
string translationFile = "${Config.PublicPath}/Applications/$applicationName.app/Resources/Strings/$language/translation.strings.fe";
string javascriptFile = "$outputPath/$applicationName.translation.$language.js";
array  translation = [];

monitor { 
	translation = include(translationFile);

	Directory.build(outputPath);
	File.remove(javascriptFile);
	File.create(javascriptFile) using ( file ) {
		file.writeln(translationsForJavascript(language, translation));
	};
	Console.println("Created $javascriptFile");
} handle {
	Console.println("Unable to load translation for language $language");
}

