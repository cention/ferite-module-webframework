namespace modifies GUIKit {
	class CSimpleComboboxDataSource {
		object _combobox;
		array _items;
		function constructor( object combobox ) {
			._combobox = combobox;
		}
		function append( array item ) {
			if( item.keyExists( 'TextValue' ) ) {
				string id = item['TextValue'];
				string value = item['TextValue'];
				if( item.keyExists('id') ) {
					id = item['id'];
				}
				.append( id, value );
			}
		}
		function append( string item ) {
			.append( item, item );
		}
		function append( string id, string value ) {
			._items[] = "{ id:'${id}', value:'${value}' }";
		}
		function items {
			return ._items;
		}
	}
	class CCombobox extends GUIKit.CTextfield {
		[attribute string icon '' 'The icon to be displayed besides the text field'];
		[attribute boolean listEnabled true 'If the list should be enabled'];
		[attribute boolean textfieldEnabled true 'If the text field should be enabled'];
		
		object source;
		array addresses;	
		string func = "abc()";	

		function initialiseComponent {
			super.initialiseComponent();
		}
		function _createDataSource {
			if( not .source ) {
				.source = new GUIKit.CSimpleComboboxDataSource( self );
			}
		}
		function setDataSource( array source ) {
			._createDataSource();
			source.each() using ( item ) {
				.source.append( item );
			};
		}

		[mcam_request doAutoComplete];
		function doAutoComplete( array parameters ) {
			if( .fetchDelegate() ) {
				return .fetchDelegate().doAutoComplete(self, parameters['complete_term'], parameters['extra']);
			} else {
				return '<ul><li>' + I('No Valid Completions') + '</li></ul>';
			}
			
		}


		function render {
			if( .visible() ) {
				array values = .generateTemplateAttributes( 'wfCombobox' );
				object component = GUIKit.componentByName( 'Combobox' );
				string path = component.pathForComponentResource( 'Combobox.template' );
				values['items'] = '[]';
				if( .source ) {
					values['items'] = '[' + .source._items.join(',') + ']';
				}
				if( values['icon'] ) {
					values['icon'] = uriForImageResource(values['icon']);
				}
				return GUIKit.ViewTemplate.renderPath( path, values );
			}
			return "";
		}
	}
}

