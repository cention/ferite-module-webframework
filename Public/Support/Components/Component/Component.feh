namespace modifies GUIKit {

	namespace XMLTools {
		function nodeHasAttribute( object node, string _target ) {
			array a = node.getAttributes();
			string target = _target.toLower();
			string has = '';
			a.map() using ( attribute, value ) {
				if( attribute.toLower() == target ) {
					has = value;
					return false;
				}
			};
			return has;
		}
		function nodeIsWFComponent( object node ) {
			array a = node.getNamespace();
			if( a.keyExists('wf') ) {
				return true;
			}
			return false;
		}
		function nodeIsSpecificWFComponent( object node, string name ) {
			if( .nodeIsWFComponent(node) and node.getElementName() == name )
				return true;
			return false;
		}
	}

	class AbstractComponent extends GUIKit.View {
		static function checkStaticVariables() {
			object k = new Class(self);
			if( not Array.keyExists( k.getVariables(), "_componentAttributes" ) ) {
				log('Page.checkStaticVariables', "Creating Static Variables");
				eval( " class modifies ${Class.name(self)} { 
							static array _componentAttributes;
							static string _formValue;
							static array _mcamRequests;
							static array _mcamChannels;
						}" );
			}
		}
		directive style_attribute( string type, string stylesheet, void initialValue, string description ) {
			string name = '';
			object o = new Regexp('-([a-zA-Z])');
			
			.checkStaticVariables();
			
			name = o.replaceAll( stylesheet ) using ( match ) {
				return match.capture(0).toUpper();
			};
			._componentAttributes[name.toLower()] = [ 
					'name' => name, 
					'type' => type, 
					'has-value' => true,
					'value' => initialValue, 
					'description' => description,
					'stylesheet' => stylesheet ];
		}
		directive mcam_request( string request_name ) {
			.checkStaticVariables();
			._mcamRequests[] = request_name;
		}
		directive mcam_channel( string request_name ) {
			.checkStaticVariables();
			._mcamChannels[] = request_name;
		}
		directive attribute( string type, string name, void initialValue, string description ) {
			.checkStaticVariables();
			._componentAttributes[name.toLower()] = [ 
					'name' => name, 
					'type' => type, 
					'has-value' => true,
					'value' => initialValue, 
					'description' => description,
					'stylesheet' => '' ];
		}
		directive attribute( string type, string name, string description ) {
			.checkStaticVariables();
			._componentAttributes[name.toLower()] = [ 
					'name' => name, 
					'type' => type, 
					'has-value' => false,
					'description' => description,
					'stylesheet' => '' ];
		}
		directive formvalue( string name ) {
			.checkStaticVariables();
			if( ._componentAttributes.keyExists(name) ) 
				._formValue = name;
		}
		static constructor {
			string code = '';
			.checkStaticVariables();
			if( ._componentAttributes ) {
				string variables = '', processCode = '', generateCode = '', styleCode = '';
				processCode += 'function processAttributes( array attributes ) {';
				processCode += 'array attributesToParent; 
								object o = new Object(self); 
								attributes.map() using ( _key, value ) { 
									string key = _key.toLower();';
				generateCode += 'function generateAttributes() { array attributes = super.generateAttributes();';
				styleCode += 'function styleSheetSettings() { string style = super.styleSheetSettings();';
				._componentAttributes.each() using ( details ) {
					string name = details['name'];
					string type = details['type'];
					string getName = "${name[0].toLower()}${name[1..]}";
					string setName = "set${name[0].toUpper()}${name[1..]}";
					string realType = type;
					
					if( type == 'numerical_list' ) {
						realType = 'array';
					}
					variables += "$realType _$name" + (details['has-value'] ? 
														" = " + (type == 'string' ? "'${details['value']}'" : details['value']) : 
														'') + ';';
					variables += "function $getName() return ._$name;";
					switch( type ) {
						case 'string':
							variables += "function $setName( string value ) { string old = ._$name; .touch('$name'); ._$name = value; .attributeChanged('$name'); return old; }";
							generateCode += "attributes['$name'] = ._$name;";
							break;
						case 'number':
							variables += "function $setName( number value ) { number old = ._$name; .touch('$name'); ._$name = value; .attributeChanged('$name'); return old; }";
							variables += "function $setName( string value ) { number old = ._$name; .touch('$name'); ._$name = value.toNumber(); .attributeChanged('$name'); return old; }";
							generateCode += "attributes['$name'] = '' + ._$name;";
							break;
						case 'boolean':
							variables += "function $setName( string value )  { boolean old = ._$name; .touch('$name'); ._$name = .stringToBoolean(value); .attributeChanged('$name'); return old; }";
							variables += "function $setName( boolean value ) { boolean old = ._$name; .touch('$name'); ._$name = value; .attributeChanged('$name'); return old; }";
							generateCode += "attributes['$name'] = ._$name;";
							break;
						case 'numerical_list':
							variables += "function $setName( string value ) { 
								array ids;
								.touch('$name');
								value.trim('[]').toArray(',').each() using ( id ) {
									ids[] = id.trim(\" \\t\\r\\n\").toNumber();
								};
								return .$setName(ids);
							 }";
							variables += "function $setName( array value ) { array old = ._$name; .touch('$name'); ._$name = value; .attributeChanged('$name'); return old; }";
							generateCode += "attributes['$name'] = ._$name;";
							break;
					}
					if( details['stylesheet'] ) {
						styleCode += "if( ._$name ) { style += '${details['stylesheet']}:' + ._$name + ';'; }";
					}
					processCode += "
						if( key == '${name.toLower()}' ) { 
							object f = o.getFunction('$setName'); 
							if( f ) { 
								f.exec( value );
								return;
							}
						}";
				};
				processCode += "attributesToParent[_key] = value; }; super.processAttributes(attributesToParent); }";
				generateCode += 'return attributes; }';
				styleCode += 'return style; }';
				code += variables + processCode + generateCode + styleCode;
			}
			if( ._mcamChannels or ._mcamRequests ) {
				string mcamCode = '', initCode = '';
				mcamCode += "function handleMCAMCommand( string name, array parameters ) { 
								switch( name ) {";
				Array.each(._mcamRequests) using ( request_name ) {
					mcamCode += "case \"" + '${.id}.' + "$request_name\": {";
					mcamCode += "	void r = .$request_name( parameters ); 
									return HTML.MCAMChannel('Result', name, r);";
					mcamCode += "} ";
				};
				Array.each(._mcamChannels) using ( request_name ) {
					mcamCode += "case \"" + '${.id}.' + "$request_name\": { return .$request_name( parameters ); }";
				};
				mcamCode += " default:
								super.handleMCAMCommand( name, parameters );
							} }";
				
				initCode = "function initialiseMCAM {";
				Array.each(._mcamRequests) using ( request_name ) {
					initCode +=  "Cache.page.registerDynamicMCAMHandler(\"\${.id}.$request_name\", self);";
				};
				Array.each(._mcamChannels) using ( request_name ) {
					initCode +=  "Cache.page.registerDynamicMCAMHandler(\"\${.id}.$request_name\", self);";
				};
				initCode += '}';
				code += mcamCode + initCode;
			} else {
				code += "function initialiseMCAM();";
			}
			if( ._formValue ) {
				string setName = "set${._formValue[0].toUpper()}${._formValue[1..]}";
				code += "function handleFormValue( string value ) { return .$setName(value); }";
			}
			if( code ) {
				code = "class modifies ${Class.name(self)} { $code }";
				eval( code );
			}
		}
		function handleMCAMCommand( string name, array parameters ) {
			raise new Error('Unable to find MCAM request handler for ' + name + ' in component ' + .id);
		}
		function initialiseComponent {
			super.initialiseComponent();
			.initialiseMCAM();
		}
		function attributeChanged( string name )
			;
		string defaultCustomExtra;
		function setDefaultCustomExtra( void value )
			.defaultCustomExtra = "$value";
		function customExtra( string event )
			return .defaultCustomExtra;
		function customEventHook( string event, string body )
			return .customEventHook(event) + body;
		
		string customEventHooks;
		function setCustomEventHooks( string customEventHooks )
			.customEventHooks = customEventHooks;
		function renderEvent( string event )
			return true;
		function eventHooks
			return .eventHooks(self);
		function eventHooks( object reciever ) {
			if( not .customEventHooks ) {
				string hooks = '';
				boolean proxyEvent = (reciever.id != .id);
				string rid = reciever.id;
				Array.map( .eventHooks ) using ( event, target ) {
					string jsevent = GUIKit.eventToComponentAction(event);
					if( jsevent and (.renderEvent(event) or proxyEvent) ) {
						string submitFunction = (target instanceof GUIKit.EventHolder ? target.jsfunction : .submitFunction());
						string extra = (target.extra ? target.extra : .customExtra(event));
						string previousID = .javascriptSafeID('previous_' + rid + '_' + jsevent);
						string defaultBody = '';

						defaultBody += "$submitFunction('${.id}', '$event', '$extra');";
						if( jsevent == 'click' )
							defaultBody += "CancelEvent(event);";
						defaultBody += "return false;";

						hooks += "$previousID = _('$rid').getAction('$jsevent');";
						hooks += "_('$rid').registerAction('$jsevent', function(event) {";
						hooks += "if( $previousID ) { $previousID(event); }";
						hooks += "${.customEventHook(event, defaultBody)}";
						hooks += "});";
					}
				};
				return hooks;
			}
			return .customEventHooks;
		}
		
		/* General attributes */
		[style_attribute string 'font-size' ''    'Size of the font to use'];
		[attribute string  action           ''    'The hotkey action the component is tied to'];
		
		/* Container helpers */
		[attribute number  instanceID       0     'ID of the item within the container'];
		[attribute boolean instanceSelected false 'Whether the item is selected within the container'];

		static function attributesFromXMLNode( object container, object node ) {
			array attributes, _attributes = node.getAttributes();
			string value = '';
			
			if( not GUIKit.XMLTools.nodeIsWFComponent(node) ) {
				if( (value = GUIKit.XMLTools.nodeHasAttribute(node, 'id')) ) {
					_attributes['instanceID'] = value;
				}
				if( (value = GUIKit.XMLTools.nodeHasAttribute(node, 'selected')) ) {
					_attributes['instanceSelected'] = value;
				}
				_attributes.map() using ( key, value ) {
					if( not (['id', 'selected'].valueExists(key.toLower())) ) {
						attributes[key] = value;
					}
				};
			} else {
				attributes = _attributes;
			}
			
			if( node.getElementData() and not attributes.keyExists('TextValue') ) {
				attributes['TextValue'] = node.getElementData();
			}
			return attributes;
		}
		function loadFromXMLNode( object container, object node ) {
			.processAttributes( GUIKit.AbstractComponent.attributesFromXMLNode(container, node) );
		}
	}
	class AbstractContainerComponent extends GUIKit.AbstractComponent {
		array contents;

		function setContents( array c )
			.contents = c;

		function isContainer( object node )
			return true;

		function handleChildren( array children, object renderEngine );

		function preProcessContainerContents( string output )
			return output;

		function render( string value ) {
			return .renderContainerStart() + .preProcessContainerContents(value) + .renderContainerEnd();
		}
	}
}