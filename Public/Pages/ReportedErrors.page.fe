class ReportedErrorsPage extends GUIKit.Page {

	[component ErrorList];
	[component ErrorOutput];
	[component TheID, FindErrorButton];

	[component TodayButton, WeekButton, MonthButton, AllButton];
	[component DayCount];


	[persist number dayCount];
	[persist boolean resetData];
	
	function initialiseComponents {
		.ErrorList.registerEventHook( self, "ListSelectionChanges", GUIKit.EvChange );
		.FindErrorButton.registerEventHook( self, "FindIDClicked", GUIKit.EvClick );
		.TodayButton.registerEventHook( self, "ChangeTimespan", GUIKit.EvClick, "1" );
		.WeekButton.registerEventHook( self, "ChangeTimespan", GUIKit.EvClick, "7" );
		.MonthButton.registerEventHook( self, "ChangeTimespan", GUIKit.EvClick, "30" );
		.AllButton.registerEventHook( self, "ChangeTimespan", GUIKit.EvClick, "365" );
	}
	function pageLoaded {
		if( not .dayCount ) {
			.dayCount = 1;
		}
		.loadList();
	}
	function loadList {
		array list = [];
		webframework.RecordedError.listInDateRange( Date.now() - (.dayCount * 24 * 60 * 60), Date.now() ).each() using ( value ) {
			list.unshift([ 'id' => value.id, 'TextValue' => "[${value.id}] ${value.action} - ${HTML.bold(value.message)} &raquo; ${formatDateTime(value.timeOccurred)}" ]);
		};
		.ErrorList.setDataSource(list, .resetData);
		.DayCount.setTextValue('' + .dayCount);
		.resetData = false;
	}
	function ChangeTimespan( object sender, string extra ) {
		.dayCount = extra.toNumber();
		.resetData = true;
		.loadList();
	}
	function loadError( number id ) {
		object reportedError = webframework.RecordedError.load(id);
		string output = '';
		if( reportedError ) {
			.ErrorList.setSelected([id]);
			.TheID.setTextValue(id);
			output += HTML.div(HTML.bold(I('ID')) + ': <a href="' + uriForApplicationAction('ReportedErrors/-/' + reportedError.id) + '">' + reportedError.id + ' [copy this url to share the report]</a>');
			output += HTML.div(HTML.bold(I('Message')) + ': ' + reportedError.message);
			output += HTML.div(HTML.bold(I('Action')) + ': ' + reportedError.action);
			output += HTML.div(HTML.bold(I('Error')) + ': ' + reportedError.error);
			output += HTML.div(HTML.bold(I('Backtrace')) + ': ' + HTML.blockquote(reportedError.backtrace));
			output += HTML.div(HTML.bold(I('Custom Values')) + ': ' + HTML.blockquote(reportedError.custom_values));
			output += HTML.div(HTML.bold(I('Time Occurred')) + ': ' + formatDateTime(reportedError.timeOccurred));
			.ErrorOutput.setTextValue(output);
		} else {
			.ErrorOutput.setTextValue(I('Unable to load error'));
		}
	}
	[hidden_command '(id:number)' loadError];
	function loadError( array values ) {
		.loadError(values['id']);
	}
	function ListSelectionChanges( object sender, string extra ) {
		array selected = .ErrorList.selected();
		selected and .loadError(selected[0]);
	}
	function FindIDClicked( object sender, string extra ) {
		.loadError(.TheID.numberValue());
	}
	[mcam_request ReportJavascriptError];
	function ReportJavascriptError( array values ) {
		object o = new webframework.RecordedError();
		object user = Permissions.fetchUserObject();
		o.setValue('message', 'Javascript Error');
		o.setValue('action', values['action']);
		o.setValue('backtrace', Regexp.replaceAll("\n", values['backtrace'], "<br />\n"));
		o.setValue('custom_values', 'Logged in user: ' + user.toName() + ' (' + user.username + ')<br />' + Core.DumpValues("<br />"));
		o.setValue('timeOccurred', Date.now());
		o.setValue('error', '');
		o.save();
		return '';
	}
}
return ReportedErrorsPage;
